cmake_minimum_required(VERSION 3.1)
project (fineframework)

set (CMAKE_CXX_STANDARD 11)
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Select build type")
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo" "MinSizeRel")

set(INCLUDE_DIRECTORIES "${INCLUDE_DIRECTORIES}" CACHE STRING "Additional include directories")
set(CMAKE_LIBRARY_PATH "${CMAKE_LIBRARY_PATH}" CACHE STRING "Additional library directories")

if(APPLE)
  include_directories(/usr/local/include)
  link_directories(/usr/local/lib)
endif()
include_directories(include)
if(MSVC)
  link_directories(${CMAKE_BINARY_DIR}/Debug)
  link_directories(${CMAKE_BINARY_DIR}/Release)
endif(MSVC)
include_directories(${INCLUDE_DIRECTORIES})
link_directories(${CMAKE_LIBRARY_PATH})
  
if(UNIX OR APPLE)
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath -Wl,$ORIGIN")
endif()

find_library(GLFW3_LIBRARY NAMES glfw3 glfw glfw3_static glfw3_static)
find_library(FREETYPE_LIBRARY NAMES freetype2 freetype freetype2_static freetype_static)
find_library(PNG_LIBRARY NAMES png png_static)
find_library(JPEG_LIBRARY NAMES jpeg jpeg_static)
find_library(TIFF_LIBRARY NAMES tiff tiff_static)
find_library(ZLIB_LIBRARY NAMES z z_static)
if(APPLE)
  find_library(BZ2_LIBRARY NAMES bz2 HINTS /usr/local/lib)
endif(APPLE)

message(STATUS "glfw3 library path: ${GLFW3_LIBRARY}")
message(STATUS "freetype library path: ${FREETYPE_LIBRARY}")
message(STATUS "png library path: ${PNG_LIBRARY}")
message(STATUS "jpeg library path: ${JPEG_LIBRARY}")
message(STATUS "tiff library path: ${TIFF_LIBRARY}")
message(STATUS "zlib library path: ${ZLIB_LIBRARY}")
if(APPLE)
  message(STATUS "bz2 library path: ${BZ2_LIBRARY}")
endif(APPLE)

message(STATUS "INCLUDE_DIRECTORIES: ${INCLUDE_DIRECTORIES}")

if(NOT MSVC)
  set(THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads REQUIRED)
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(CMAKE_DEBUG_POSTFIX _d CACHE STRING "Postfix added to debug version of the library")

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

option(BUILD_SHARED_LIBS "Build Shared Libraries" ON)
option(BUILD_MODULE_MATH "Build math module (Must stay ON!)" ON)
option(BUILD_MODULE_GRAPHICS "Build OpenGL graphics module" ON)
option(BUILD_MODULE_DATA "Build Data module" ON)
option(BUILD_MODULE_GUI "Build GUI module" ON)
option(BUILD_MODULE_MEDIA "Build Media module" ON)
option(BUILD_EXAMPLES "Build examples" ON)
option(BUILD_TESTS "Build tests" ON)
option(BUILD_INSTALL "Install library" ON)

if(UNIX)
  if(NOT APPLE)
    option(STATIC_STDLIB "Link against static stdlib" OFF)
  else()
    option(STATIC_STDLIB "Link against static stdlib" OFF)
  endif()
else()
  option(STATIC_STDLIB "Link against static stdlib" OFF)
endif()

if(APPLE)
  find_library(OPENGL_LIBRARY OpenGL)
  find_library(COCOA_LIBRARY Cocoa)
  find_library(IOKIT_LIBRARY IOKit)
  find_library(COREVIDEO_LIBRARY CoreVideo)
endif()

if(BUILD_TESTS)
  enable_testing ()
endif()

function(add_modulesubdirs MODULE)
  add_subdirectory(source/${MODULE})
  if(BUILD_EXAMPLES)
    add_subdirectory(examples/${MODULE})
  endif()
  if(BUILD_TESTS)
    add_subdirectory(tests/${MODULE})
  endif()
endfunction(add_modulesubdirs)

if(BUILD_MODULE_MATH)
  add_modulesubdirs(math)
endif()

if(BUILD_MODULE_GRAPHICS)
  add_modulesubdirs(graphics)
endif()

if(BUILD_MODULE_DATA)
  add_modulesubdirs(data)
endif()

if(BUILD_MODULE_GUI)
  add_modulesubdirs(gui)
endif()

if(BUILD_MODULE_MEDIA)
  add_modulesubdirs(media)
endif()

if (BUILD_INSTALL)
  install(DIRECTORY include/ffw DESTINATION include)
endif()
