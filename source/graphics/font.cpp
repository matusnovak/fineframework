/*** This file is part of FineFramework project ***/

#include "ffw/graphics/font.h"
#include "ffw/graphics/rendercontext.h"
#include "ffw/graphics/extensions.h"

#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_GLYPH_H

static int totalTextureW = 7;
static int availableTextureW[7] = {64, 128, 256, 512, 1024, 2048, 4096};
static int pow2[7] = {4, 8, 16, 32, 64, 128, 256};

///=============================================================================
static int next_p2(int a){
    for(int i = 0; i < 8; i++){
        if(a < pow2[i])return pow2[i];
    }
    return 2;
}

///=============================================================================
class ftLibrary{
public:
	ftLibrary(){
		FT_Init_FreeType(&lib);
	}

	~ftLibrary(){
		FT_Done_FreeType(lib);
		lib = NULL;
	}

	static FT_Library get(){
		static ftLibrary* instance = NULL;
		if(instance == NULL){
			instance = new ftLibrary();
		}
		return instance->lib;
	}

private:
	FT_Library lib;
};

///=============================================================================
bool ffw::Font::CheckCompability(const ffw::RenderContext* renderer){
	return (ffw::Texture2D::CheckCompability(renderer) && ffw::Vbo::CheckCompability(renderer));
}

///=============================================================================
ffw::Font::Font(){
    tempchar.resize(1, L' ');
	loaded = false;
	unicodePtr = new unsigned short[FFW_FT_UNICODE_MAX];
}

///=============================================================================
ffw::Font::Font(Font&& other){
	swap(other);
}

///=============================================================================
ffw::Font::~Font(){
    Destroy();
	delete[] unicodePtr;
}

///=============================================================================
bool ffw::Font::Destroy(){
	texture.Destroy();
	loaded = false;
	for(auto& c : characters){
		if(c.pixels != NULL)delete[] c.pixels;
	}
	characters.clear();
    return true;
}

///=============================================================================
bool ffw::Font::CreateFromData(const ffw::RenderContext* renderer, const unsigned char* buffer, size_t length, int points, int dpi, int start, int end){
	if(loaded)return false;
	if(!CheckCompability(renderer))return false;
	rendererptr = renderer;

	FT_Face fontFace;
	int errorCheck = FT_New_Memory_Face(ftLibrary::get(), buffer, length, 0, &fontFace);
    return LoadFontFace(fontFace, errorCheck, points, dpi, start, end);
}

///=============================================================================
bool ffw::Font::CreateFromFile(const ffw::RenderContext* renderer, const std::string& path, int points, int dpi, int start, int end){
    if(loaded)return false;
	if(!CheckCompability(renderer))return false;
	rendererptr = renderer;

	FT_Face fontFace;
	int errorCheck = FT_New_Face(ftLibrary::get(), path.c_str(), 0, &fontFace);
    return LoadFontFace(fontFace, errorCheck, points, dpi, start, end);
}

///=============================================================================
bool ffw::Font::LoadFontFace(void* face, int error, int points, int dpi, int start, int end){
	FT_Face fontFace = (FT_Face)face;

	if(error == FT_Err_Unknown_File_Format){
		//std::cout << "FT_Err_Unknown_File_Format" << std::endl;
		return false;

    } else if(error){
		//std::cout << "Unknown error" << std::endl;
		return false;
    }

	//std::cout << "Points: " << points << " dpi: " << dpi << std::endl;
	error = FT_Set_Char_Size(fontFace, 0, points*64, dpi, dpi);

	if(error == FT_Err_Unknown_File_Format){
		//std::cout << "FT_Err_Unknown_File_Format" << std::endl;
		return false;
    }

	sizePoints = points;
    sizePixels = int((points/72.0f) * dpi);
    sizeDpi = dpi;
    lineHeight = int(sizePixels*1.5f);
	loaded = true;

	if(!RenderGlyph(fontFace, 0, 0)){
        Destroy();
		//std::cout << "Render glyph 0 error" << std::endl;
		return false;
    }

	if(end > FFW_FT_UNICODE_MAX)end = FFW_FT_UNICODE_MAX;

	for(int i = start; i <= end; i++){
        int glyphIndex = FT_Get_Char_Index(fontFace, i);

        if(glyphIndex == 0){
            // Glyph does not exists
            continue;
        }
        // Render glyph
        RenderGlyph(fontFace, glyphIndex, i);
    }

	size_t charCount = characters.size();

    // Sort all glyphs
	int changes = 1;
    while(changes){
        changes = 0;
		for(size_t i = 0; i < charCount-1; i++){
            if(characters[i].height < characters[i+1].height){
				std::swap(characters[i], characters[i+1]);
                changes++;
            }
        }
    }

    // Get smallest possible texture for font
    int found = -1;
    int lastPosY = 0;

    for(int t = 0; t < totalTextureW; t++){
        int posX = 0;
        int posY = 0;
        int line = 0;
        found = t;

        // Try to fit each character inside
        for(const auto& chr : characters){
            // Check horizontal space
            if(posX + chr.texWidth > availableTextureW[t]){
                posX = 0;
                posY += line;
                line = 0;
                // If we run out of rows, break and try bigger texture size
                if(posY > availableTextureW[t]){
                    found = -1;
                    break;
                }
            }

            // Check vertical space
            if(posY + chr.texHeight > availableTextureW[t]){
                found = -1;
                break;
            }

            // Get highest character in row
            if(line < chr.height){
                line = chr.height;
                lastPosY = posY + line;
            }

            // Move right
            posX += chr.width;
        }

        // Did we fit all characters inside?
        if(found == t)break;
    }

    // Check if we found texture size
    if(found == -1){
		Destroy();
		std::cout << "Can not fit all characters even into biggest texture! Points or DPI is too big!" << std::endl;
		return false;
    }

    totalWidth = availableTextureW[found];
    totalHeight = availableTextureW[found];

    // Check if we can split texture in half verticaly
    if(totalHeight/lastPosY >= 2){
        totalHeight = totalHeight/2;
    }

	int posX = 0;
    int posY = 0;
    int line = 0;

    // Upload all pixels
    for(auto& chr : characters){

        // Check horizontal space
        if(posX + chr.texWidth > totalWidth){
            posX = 0;
            posY += line;
            line = 0;
            // We run out of empty vertical space
            if(posY > totalHeight){
                //std::cout << "something went wrong!" << std::endl;
                break;
            }
        }

        // Check vertical space
        if(posY + chr.texHeight > totalHeight){
            //std::cout << "something went wrong!" << std::endl;
            break;
        }

        // Get highest character in row
        if(line < chr.height)line = chr.height;

        // Upload pixels to texture
        //fontTexture.setPixels(0, posX, posY, chr.texWidth, chr.texHeight, chr.pixels);

        // Save coordinates
        chr.x = static_cast<short>(posX);
        chr.y = static_cast<short>(posY);

        // Move right in row
        posX += chr.width;
    }

	// Create font texture
    if(!texture.Create(rendererptr, totalWidth, totalHeight, GL_ALPHA8, GL_ALPHA, GL_UNSIGNED_BYTE)){
		Destroy();
		return false;
    }

	texture.Bind();

	// Upload all pixels
    for(auto& chr : characters){
        // Upload pixels to texture
        texture.SetPixels(0, chr.x, chr.y, chr.texWidth, chr.texHeight, chr.pixels);
		delete[] chr.pixels;
		chr.pixels = NULL;
    }

    // Fill unicode array table
    for(size_t i = 0; i < FFW_FT_UNICODE_MAX; i++){
        unicodePtr[i] = 0;
        for(size_t c = 0; c < characters.size(); c++){
            if(characters[c].unicode == i){
                unicodePtr[i] = static_cast<unsigned short>(c);
				break;
            }
        }
    }

    texture.GenerateMipmaps();
    texture.SetTexParami(GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    texture.SetTexParami(GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	texture.SetEnvParami(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
	texture.Unbind();

	return true;
}

///=============================================================================
bool ffw::Font::RenderGlyph(void* face, int glyphIndex, int Unicode){
	FT_Face fontFace = (FT_Face)face;

	if(FT_Load_Glyph(fontFace, glyphIndex, FT_LOAD_DEFAULT)){
        // Can not load glyph
		std::cout << "Can not load glyph error" << std::endl;
        return false;
    }

    // Get glyph object
    FT_Glyph glyph;
    if(FT_Get_Glyph(fontFace->glyph, &glyph )){
        // Failed to get glyph
		std::cout << "Failed to get glyph error" << std::endl;
        return false;
    }

    // Convert glyph to bitmap
    FT_Glyph_To_Bitmap(&glyph, FT_RENDER_MODE_NORMAL, 0, 1);

    // Type cast
    FT_BitmapGlyph bitmap_glyph = (FT_BitmapGlyph)glyph;

    // Reference to bitmap for easier access
    FT_Bitmap& bitmap = bitmap_glyph->bitmap;

    // Get nearest power of two width and height
    int texWidth = next_p2(bitmap.width);
    int texHeight = next_p2(bitmap.rows);

    // Get pixels from glyph bitmap
    unsigned char* pixels = new unsigned char [texWidth*texHeight];
    for(int y = 0; y < texHeight; y++) {
        for(int x = 0; x < texWidth; x++){
            if(x < (int)bitmap.width && y < (int)bitmap.rows){
                pixels[x+y*texWidth] = bitmap.buffer[x + bitmap.width*y];
            } else {
                pixels[x+y*texWidth] = 0;
            }
        }
    }

    characters.push_back(CharStruct());
    auto& c = characters.back();

	c.pixels = pixels;
    c.width = static_cast<short>(bitmap.width);
    c.height = static_cast<short>(bitmap.rows);
    c.texWidth = static_cast<short>(texWidth);
    c.texHeight = static_cast<short>(texHeight);
    c.left = short(fontFace->glyph->metrics.horiBearingX/64);
    c.bearing = short(fontFace->glyph->metrics.horiBearingY/64);
    c.advance = short(fontFace->glyph->advance.x >> 6);
    //c.pixels = pixels;
    c.unicode = static_cast<unsigned short>(Unicode);

	FT_Done_Glyph(glyph);

    return true;
}

///=============================================================================
void ffw::Font::GetCharTexCoords(unsigned short c, ffw::Vec2f& t0, ffw::Vec2f& t1, ffw::Vec2f& t2, ffw::Vec2f& t3) const {
    if(!IsCreated())return;
    const auto& chr = GetChar(c);

    GLfloat charS = GLfloat(chr.x) / GLfloat(texture.GetWidth());
    GLfloat charT = GLfloat(chr.y) / GLfloat(texture.GetHeight());
    GLfloat charU = GLfloat(chr.width) / GLfloat(texture.GetWidth());
    GLfloat charV = GLfloat(chr.height) / GLfloat(texture.GetHeight());

    t0.x = charS;
    t0.y = charT;

    t1.x = charS + charU;
    t1.y = charT;

    t2.x = charS + charU;
    t2.y = charT + charV;;

    t3.x = charS;
    t3.y = charT + charV;
}

///=============================================================================
template<class T> ffw::Vec2i getStringSizeTemplate(const ffw::Font* font, const T& str){
    if(str.size() == 0)return 0;
	ffw::Vec2i size(0, font->GetSize());
    int width = 0;
    for(const auto& chr : str){
        if(chr == '\n'){
            size.y += font->GetLineHeight();
            if(size.x < width)size.x = width;
            width = 0;
        } else {
			const auto& ch = font->GetChar(chr);
            width += ch.advance;
        }
    }
    if(size.x < width)size.x = width;
    return size;
}

///=============================================================================
ffw::Vec2i ffw::Font::GetStringSize(const std::string& str) const {
	return getStringSizeTemplate(this, str);
}

///=============================================================================
ffw::Vec2i ffw::Font::GetStringSize(const std::wstring& str) const {
	return getStringSizeTemplate(this, str);
}

///=============================================================================
ffw::Font& ffw::Font::operator = (Font&& other){
	if(this != &other){
		swap(other);
	}
	return *this;
}

///=============================================================================
void ffw::Font::swap(Font& other){
	if(this != &other){
		using std::swap;

		swap(rendererptr, other.rendererptr);
		swap(texture, other.texture);
		swap(characters, other.characters);
		swap(unicodePtr, other.unicodePtr);
		swap(sizePoints, other.sizePoints);
		swap(sizePixels, other.sizePixels);
		swap(sizeDpi, other.sizeDpi);
		swap(lineHeight, other.lineHeight);
		swap(loaded, other.loaded);
		swap(totalWidth, other.totalWidth);
		swap(totalHeight, other.totalHeight);
	}
}

static unsigned char defaultFontByteData[] = {0x00, 0x01, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x80, 0x00, 0x03, 0x00, 0x50, 0x46, 0x46, 0x54, 0x4D, 0x77, 0x27, 0x26, 0x24, 0x00, 0x00, 0x1F, 0xF4, 0x00, 0x00, 0x00, 0x1C, 0x47, 0x44, 0x45, 0x46, 0x00, 0x27, 0x00, 0x8D, 0x00, 0x00, 0x1F, 0xCC, 0x00, 0x00, 0x00, 0x26, 0x4F, 0x53, 0x2F, 0x32, 0x65, 0xC8, 0xD6, 0x7F, 0x00, 0x00, 0x01, 0x58, 0x00, 0x00, 0x00, 0x60, 0x63, 0x6D, 0x61, 0x70, 0x51, 0x54, 0x24, 0x7D, 0x00, 0x00, 0x03, 0x54, 0x00, 0x00, 0x01, 0x5A, 0x67, 0x61, 0x73, 0x70, 0xFF, 0xFF, 0x00, 0x03, 0x00, 0x00, 0x1F, 0xC4, 0x00, 0x00, 0x00, 0x08, 0x67, 0x6C, 0x79, 0x66, 0x36, 0xA8, 0xF5, 0xF6, 0x00, 0x00, 0x05, 0x80, 0x00, 0x00, 0x12, 0xD0, 0x68, 0x65, 0x61, 0x64, 0x08, 0x44, 0xDB, 0x53, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x36, 0x68, 0x68, 0x65, 0x61, 0x06, 0x4F, 0x03, 0x26, 0x00, 0x00, 0x01, 0x14, 0x00, 0x00, 0x00, 0x24, 0x68, 0x6D, 0x74, 0x78, 0xE4, 0x8E, 0x22, 0xC4, 0x00, 0x00, 0x01, 0xB8, 0x00, 0x00, 0x01, 0x9C, 0x6C, 0x6F, 0x63, 0x61, 0xF0, 0x36, 0xF5, 0x1E, 0x00, 0x00, 0x04, 0xB0, 0x00, 0x00, 0x00, 0xD0, 0x6D, 0x61, 0x78, 0x70, 0x00, 0x6B, 0x00, 0x28, 0x00, 0x00, 0x01, 0x38, 0x00, 0x00, 0x00, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0xF4, 0x34, 0x3D, 0x2D, 0x00, 0x00, 0x18, 0x50, 0x00, 0x00, 0x06, 0x6C, 0x70, 0x6F, 0x73, 0x74, 0x07, 0xA2, 0x71, 0x99, 0x00, 0x00, 0x1E, 0xBC, 0x00, 0x00, 0x01, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0x4D, 0x5C, 0xA2, 0x5F, 0x0F, 0x3C, 0xF5, 0x00, 0x0B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0xFF, 0xCB, 0xF2, 0x00, 0x00, 0x00, 0x00, 0xD2, 0xFF, 0xCB, 0xF2, 0x00, 0x00, 0xFF, 0x36, 0x03, 0x26, 0x03, 0x3C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x26, 0xFF, 0x36, 0x00, 0x00, 0x03, 0x8A, 0x00, 0x00, 0xFF, 0xFE, 0x03, 0x26, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x00, 0x01, 0x00, 0x00, 0x00, 0x67, 0x00, 0x26, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0xF1, 0x01, 0x90, 0x00, 0x05, 0x00, 0x04, 0x03, 0x26, 0x03, 0x26, 0x00, 0x00, 0xFF, 0x9C, 0x03, 0x26, 0x03, 0x26, 0x00, 0x00, 0x03, 0x26, 0x00, 0x50, 0x01, 0x42, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x53, 0x54, 0x52, 0x00, 0x00, 0x00, 0x20, 0xFF, 0xFD, 0x02, 0xC2, 0xFF, 0x36, 0x00, 0x00, 0x03, 0x26, 0x00, 0xCA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x02, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x01, 0x2E, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x03, 0x8A, 0x00, 0x32, 0x02, 0xC0, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x00, 0x02, 0xC0, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x32, 0x02, 0xC0, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x32, 0x02, 0x5C, 0x00, 0x64, 0x01, 0x92, 0x00, 0x32, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x32, 0x01, 0xF8, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x64, 0x01, 0x92, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x03, 0x26, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x03, 0x8A, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x32, 0x02, 0xC0, 0x00, 0x32, 0x02, 0x5C, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x64, 0x03, 0x26, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x64, 0x01, 0x92, 0x00, 0x00, 0x02, 0x5C, 0x00, 0x64, 0x01, 0x92, 0x00, 0x64, 0x03, 0x8A, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0x92, 0x00, 0x00, 0x02, 0x5C, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x03, 0x8A, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x32, 0x02, 0x5C, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x64, 0x02, 0x5C, 0x00, 0x64, 0x02, 0xC0, 0x00, 0x64, 0x01, 0x92, 0x00, 0x64, 0x01, 0x2E, 0x00, 0x32, 0x02, 0x5C, 0x00, 0x64, 0x01, 0xF8, 0x00, 0x32, 0x03, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x02, 0x00, 0x02, 0x00, 0x7E, 0x20, 0x19, 0x20, 0x1D, 0xFF, 0xFD, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x20, 0x20, 0x18, 0x20, 0x1C, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xE3, 0xE0, 0x4A, 0xE0, 0x48, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x62, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x24, 0x00, 0x56, 0x00, 0x8C, 0x00, 0xCA, 0x00, 0xFA, 0x01, 0x06, 0x01, 0x1A, 0x01, 0x2E, 0x01, 0x48, 0x01, 0x5C, 0x01, 0x6C, 0x01, 0x7A, 0x01, 0x86, 0x01, 0x94, 0x01, 0xAE, 0x01, 0xC0, 0x01, 0xDA, 0x01, 0xF8, 0x02, 0x10, 0x02, 0x2A, 0x02, 0x48, 0x02, 0x5A, 0x02, 0x82, 0x02, 0xA0, 0x02, 0xB2, 0x02, 0xC8, 0x02, 0xDE, 0x02, 0xF2, 0x03, 0x06, 0x03, 0x20, 0x03, 0x48, 0x03, 0x64, 0x03, 0x86, 0x03, 0xA0, 0x03, 0xB8, 0x03, 0xCC, 0x03, 0xE0, 0x03, 0xFE, 0x04, 0x14, 0x04, 0x20, 0x04, 0x30, 0x04, 0x4C, 0x04, 0x5A, 0x04, 0x74, 0x04, 0x8A, 0x04, 0xA4, 0x04, 0xBE, 0x04, 0xDE, 0x04, 0xFC, 0x05, 0x1C, 0x05, 0x2E, 0x05, 0x42, 0x05, 0x5A, 0x05, 0x7C, 0x05, 0x9A, 0x05, 0xB2, 0x05, 0xC6, 0x05, 0xD8, 0x05, 0xE8, 0x05, 0xFA, 0x06, 0x0C, 0x06, 0x18, 0x06, 0x26, 0x06, 0x42, 0x06, 0x5C, 0x06, 0x70, 0x06, 0x88, 0x06, 0xA4, 0x06, 0xB8, 0x06, 0xD4, 0x06, 0xEA, 0x06, 0xFC, 0x07, 0x12, 0x07, 0x2A, 0x07, 0x3A, 0x07, 0x58, 0x07, 0x6C, 0x07, 0x86, 0x07, 0xA2, 0x07, 0xBE, 0x07, 0xD2, 0x07, 0xEE, 0x08, 0x06, 0x08, 0x1A, 0x08, 0x30, 0x08, 0x50, 0x08, 0x6A, 0x08, 0x82, 0x08, 0x96, 0x08, 0xB4, 0x08, 0xC2, 0x08, 0xE0, 0x08, 0xF4, 0x09, 0x04, 0x09, 0x14, 0x09, 0x2C, 0x09, 0x44, 0x09, 0x68, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x00, 0xCA, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x33, 0x35, 0x33, 0x15, 0x27, 0x11, 0x33, 0x11, 0x64, 0x66, 0x66, 0x66, 0x64, 0x64, 0xCA, 0x01, 0xF8, 0xFE, 0x08, 0x00, 0x00, 0x02, 0x00, 0x64, 0x01, 0xF8, 0x01, 0x94, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x13, 0x35, 0x33, 0x15, 0x33, 0x35, 0x33, 0x15, 0x64, 0x66, 0x64, 0x66, 0x01, 0xF8, 0xCA, 0xCA, 0xCA, 0xCA, 0x00, 0x00, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x03, 0x26, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x37, 0x23, 0x07, 0x03, 0x37, 0x23, 0x35, 0x33, 0x37, 0x23, 0x35, 0x33, 0x37, 0x33, 0x07, 0x33, 0x37, 0x33, 0x07, 0x33, 0x15, 0x23, 0x07, 0x33, 0x15, 0x23, 0x07, 0x23, 0x37, 0x23, 0x07, 0x01, 0xF8, 0x32, 0xCA, 0x32, 0xFC, 0x66, 0x66, 0x98, 0x32, 0x64, 0x96, 0x66, 0x64, 0x64, 0xC8, 0x66, 0x64, 0x64, 0x32, 0x64, 0x34, 0x66, 0x98, 0x64, 0x66, 0x66, 0xCA, 0x64, 0x01, 0x2E, 0x66, 0x66, 0xFE, 0xD2, 0xCA, 0x64, 0x66, 0x64, 0xCA, 0xCA, 0xCA, 0xCA, 0x64, 0x66, 0x64, 0xCA, 0xCA, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x64, 0xFF, 0x9C, 0x02, 0x5C, 0x03, 0x26, 0x00, 0x03, 0x00, 0x07, 0x00, 0x25, 0x00, 0x00, 0x25, 0x35, 0x23, 0x15, 0x03, 0x35, 0x23, 0x15, 0x13, 0x35, 0x23, 0x27, 0x35, 0x33, 0x15, 0x33, 0x35, 0x23, 0x27, 0x35, 0x37, 0x33, 0x35, 0x33, 0x15, 0x33, 0x17, 0x15, 0x23, 0x35, 0x23, 0x15, 0x33, 0x17, 0x15, 0x07, 0x23, 0x15, 0x01, 0xF8, 0x64, 0x66, 0x64, 0x64, 0x64, 0x66, 0x66, 0x64, 0x64, 0x66, 0x66, 0x64, 0x66, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0xCA, 0xCA, 0x01, 0x30, 0xC8, 0xC8, 0xFE, 0x08, 0x64, 0x64, 0x66, 0x66, 0xCA, 0x66, 0xC8, 0x66, 0x64, 0x64, 0x66, 0x64, 0x64, 0xC8, 0x66, 0xCA, 0x64, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x5C, 0x02, 0xC2, 0x00, 0x11, 0x00, 0x21, 0x00, 0x25, 0x00, 0x00, 0x21, 0x22, 0x27, 0x26, 0x35, 0x34, 0x37, 0x36, 0x32, 0x17, 0x16, 0x15, 0x14, 0x15, 0x14, 0x07, 0x06, 0x23, 0x01, 0x22, 0x27, 0x26, 0x35, 0x34, 0x37, 0x36, 0x33, 0x32, 0x17, 0x16, 0x14, 0x07, 0x06, 0x23, 0x03, 0x01, 0x33, 0x01, 0x01, 0xF8, 0x2A, 0x1E, 0x1C, 0x1C, 0x1E, 0x54, 0x1E, 0x1C, 0x1C, 0x1E, 0x2A, 0xFE, 0x6C, 0x2A, 0x1E, 0x1C, 0x1C, 0x1E, 0x2A, 0x28, 0x20, 0x1E, 0x1E, 0x1E, 0x2A, 0x32, 0x01, 0x62, 0x64, 0xFE, 0xA0, 0x1C, 0x1E, 0x2A, 0x28, 0x20, 0x1E, 0x1E, 0x1C, 0x27, 0x02, 0x03, 0x2A, 0x1E, 0x1C, 0x01, 0xF8, 0x1C, 0x1E, 0x2A, 0x28, 0x20, 0x1E, 0x1E, 0x1E, 0x54, 0x1E, 0x1C, 0xFE, 0x08, 0x02, 0xC2, 0xFD, 0x3E, 0x00, 0x00, 0x00, 0x03, 0x00, 0x64, 0x00, 0x00, 0x02, 0x5C, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x07, 0x00, 0x1E, 0x00, 0x00, 0x25, 0x35, 0x23, 0x15, 0x13, 0x35, 0x23, 0x15, 0x11, 0x27, 0x35, 0x31, 0x37, 0x27, 0x35, 0x37, 0x33, 0x17, 0x15, 0x23, 0x07, 0x17, 0x15, 0x37, 0x15, 0x07, 0x17, 0x23, 0x31, 0x27, 0x07, 0x01, 0x94, 0xCA, 0xCA, 0xCA, 0x66, 0x34, 0x34, 0x66, 0xCA, 0x64, 0x02, 0x30, 0x32, 0x64, 0x64, 0x64, 0x64, 0x32, 0x32, 0x64, 0xCA, 0xCA, 0x01, 0x30, 0xC8, 0xC8, 0xFE, 0x6C, 0x64, 0xCA, 0x32, 0x34, 0xC8, 0x66, 0x66, 0xC8, 0x34, 0x32, 0x64, 0x64, 0x64, 0x66, 0x64, 0x32, 0x32, 0x00, 0x00, 0x01, 0x00, 0x64, 0x01, 0xF8, 0x00, 0xCA, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x00, 0x13, 0x35, 0x33, 0x15, 0x64, 0x66, 0x01, 0xF8, 0xCA, 0xCA, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x9C, 0x01, 0x94, 0x03, 0x26, 0x00, 0x09, 0x00, 0x00, 0x17, 0x27, 0x11, 0x37, 0x33, 0x15, 0x23, 0x11, 0x33, 0x15, 0xCA, 0x66, 0x66, 0xCA, 0xCA, 0xCA, 0x64, 0x64, 0x02, 0xC2, 0x64, 0x64, 0xFD, 0x3E, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x9C, 0x01, 0x94, 0x03, 0x26, 0x00, 0x09, 0x00, 0x00, 0x17, 0x35, 0x33, 0x11, 0x23, 0x35, 0x33, 0x17, 0x11, 0x07, 0x64, 0xCA, 0xCA, 0xCA, 0x66, 0x66, 0x64, 0x64, 0x02, 0xC2, 0x64, 0x64, 0xFD, 0x3E, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0x01, 0xF8, 0x01, 0x94, 0x02, 0xC2, 0x00, 0x0D, 0x00, 0x00, 0x13, 0x37, 0x27, 0x33, 0x15, 0x17, 0x37, 0x33, 0x07, 0x17, 0x23, 0x31, 0x27, 0x07, 0x64, 0x66, 0x66, 0x66, 0x32, 0x32, 0x66, 0x66, 0x66, 0x66, 0x32, 0x32, 0x01, 0xF8, 0x64, 0x66, 0x02, 0x30, 0x32, 0x66, 0x64, 0x32, 0x32, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x64, 0x02, 0x5C, 0x02, 0x5C, 0x00, 0x0B, 0x00, 0x00, 0x25, 0x35, 0x23, 0x35, 0x33, 0x35, 0x33, 0x15, 0x33, 0x15, 0x23, 0x15, 0x01, 0x2E, 0xCA, 0xCA, 0x66, 0xC8, 0xC8, 0x64, 0xCA, 0x66, 0xC8, 0xC8, 0x66, 0xCA, 0x00, 0x01, 0x00, 0x32, 0xFF, 0x9C, 0x00, 0xCA, 0x00, 0x64, 0x00, 0x05, 0x00, 0x00, 0x17, 0x37, 0x35, 0x33, 0x15, 0x07, 0x32, 0x32, 0x66, 0x32, 0x64, 0x64, 0x64, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x01, 0x2E, 0x02, 0x5C, 0x01, 0x94, 0x00, 0x03, 0x00, 0x00, 0x13, 0x35, 0x21, 0x15, 0x64, 0x01, 0xF8, 0x01, 0x2E, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0xCA, 0x00, 0x64, 0x00, 0x03, 0x00, 0x00, 0x33, 0x35, 0x33, 0x15, 0x64, 0x66, 0x64, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x00, 0x33, 0x01, 0x33, 0x01, 0x32, 0x01, 0x62, 0x64, 0xFE, 0xA0, 0x02, 0xC2, 0xFD, 0x3E, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x25, 0x11, 0x23, 0x11, 0x15, 0x27, 0x11, 0x37, 0x33, 0x17, 0x11, 0x07, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x64, 0x01, 0xF8, 0xFE, 0x08, 0x64, 0x64, 0x01, 0xF8, 0x66, 0x66, 0xFE, 0x08, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x01, 0x2E, 0x02, 0xC2, 0x00, 0x06, 0x00, 0x00, 0x33, 0x11, 0x07, 0x23, 0x13, 0x33, 0x11, 0xCA, 0x32, 0x66, 0x98, 0x64, 0x01, 0xF8, 0x64, 0x01, 0x2E, 0xFD, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0E, 0x00, 0x00, 0x33, 0x11, 0x37, 0x33, 0x35, 0x21, 0x35, 0x21, 0x17, 0x15, 0x07, 0x23, 0x15, 0x21, 0x15, 0x64, 0x66, 0xCA, 0xFE, 0xD0, 0x01, 0x30, 0x64, 0x64, 0xCA, 0x01, 0x2E, 0x01, 0x2E, 0x66, 0xC8, 0x66, 0x66, 0xC8, 0x66, 0xCA, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x11, 0x00, 0x00, 0x33, 0x35, 0x21, 0x35, 0x21, 0x35, 0x21, 0x35, 0x21, 0x35, 0x21, 0x17, 0x15, 0x23, 0x07, 0x17, 0x15, 0x07, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0x01, 0x30, 0xFE, 0xD0, 0x01, 0x30, 0x64, 0x02, 0x30, 0x32, 0x64, 0x64, 0xCA, 0x66, 0xC8, 0x66, 0x66, 0xC8, 0x34, 0x32, 0xCA, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0D, 0x00, 0x00, 0x21, 0x35, 0x23, 0x11, 0x33, 0x11, 0x33, 0x35, 0x33, 0x15, 0x33, 0x15, 0x23, 0x15, 0x01, 0x2E, 0xCA, 0x66, 0x64, 0x66, 0x64, 0x64, 0xCA, 0x01, 0xF8, 0xFE, 0x6C, 0x66, 0x66, 0x64, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0D, 0x00, 0x00, 0x33, 0x35, 0x21, 0x35, 0x21, 0x11, 0x21, 0x15, 0x21, 0x15, 0x33, 0x17, 0x15, 0x07, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0x01, 0x94, 0xFE, 0xD2, 0xCA, 0x64, 0x64, 0x64, 0xCA, 0x01, 0x94, 0x66, 0xC8, 0x66, 0xCA, 0x64, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0F, 0x00, 0x00, 0x25, 0x35, 0x23, 0x1D, 0x01, 0x27, 0x11, 0x37, 0x21, 0x15, 0x21, 0x15, 0x33, 0x17, 0x15, 0x07, 0x01, 0x94, 0xCA, 0x66, 0x66, 0x01, 0x2E, 0xFE, 0xD2, 0xCA, 0x64, 0x64, 0x64, 0xCA, 0xCA, 0x64, 0x64, 0x01, 0xF8, 0x66, 0x66, 0xC8, 0x66, 0xCA, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x06, 0x00, 0x00, 0x33, 0x01, 0x21, 0x35, 0x21, 0x15, 0x01, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0x01, 0x94, 0xFE, 0xD2, 0x02, 0x5C, 0x66, 0x66, 0xFD, 0xA4, 0x00, 0x03, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x07, 0x00, 0x17, 0x00, 0x00, 0x25, 0x35, 0x23, 0x15, 0x13, 0x35, 0x23, 0x15, 0x11, 0x27, 0x35, 0x31, 0x37, 0x27, 0x35, 0x37, 0x33, 0x17, 0x15, 0x23, 0x07, 0x17, 0x15, 0x07, 0x01, 0x94, 0xCA, 0xCA, 0xCA, 0x66, 0x34, 0x34, 0x66, 0xCA, 0x64, 0x02, 0x30, 0x32, 0x64, 0x64, 0xCA, 0xCA, 0x01, 0x30, 0xC8, 0xC8, 0xFE, 0x6C, 0x64, 0xCA, 0x32, 0x34, 0xC8, 0x66, 0x66, 0xC8, 0x34, 0x32, 0xCA, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0F, 0x00, 0x00, 0x01, 0x35, 0x23, 0x15, 0x03, 0x35, 0x21, 0x35, 0x23, 0x27, 0x35, 0x37, 0x33, 0x17, 0x11, 0x07, 0x01, 0x94, 0xCA, 0x66, 0x01, 0x30, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x01, 0x94, 0xC8, 0xC8, 0xFE, 0x6C, 0x64, 0xCA, 0x66, 0xC8, 0x66, 0x66, 0xFE, 0x08, 0x64, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x64, 0x00, 0xCA, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x37, 0x35, 0x33, 0x15, 0x03, 0x35, 0x33, 0x15, 0x64, 0x66, 0x66, 0x66, 0x64, 0x66, 0x66, 0x01, 0x30, 0x64, 0x64, 0x00, 0x00, 0x02, 0x00, 0x32, 0xFF, 0x9C, 0x00, 0xCA, 0x01, 0x2E, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x17, 0x37, 0x35, 0x33, 0x15, 0x07, 0x03, 0x35, 0x33, 0x15, 0x32, 0x32, 0x66, 0x32, 0x34, 0x66, 0x64, 0x64, 0x64, 0x64, 0x64, 0x01, 0x2E, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x94, 0x02, 0xC2, 0x00, 0x08, 0x00, 0x00, 0x21, 0x01, 0x35, 0x01, 0x15, 0x07, 0x15, 0x17, 0x15, 0x01, 0x94, 0xFE, 0xD0, 0x01, 0x30, 0xCA, 0xCA, 0x01, 0x2E, 0x66, 0x01, 0x2E, 0x66, 0xC8, 0x66, 0xCA, 0x64, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0xCA, 0x02, 0x5C, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x37, 0x35, 0x21, 0x15, 0x25, 0x35, 0x21, 0x15, 0x64, 0x01, 0xF8, 0xFE, 0x08, 0x01, 0xF8, 0xCA, 0x64, 0x64, 0xCA, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x94, 0x02, 0xC2, 0x00, 0x08, 0x00, 0x00, 0x33, 0x35, 0x37, 0x35, 0x27, 0x35, 0x01, 0x15, 0x01, 0x64, 0xCA, 0xCA, 0x01, 0x30, 0xFE, 0xD0, 0x64, 0xCA, 0x66, 0xC8, 0x66, 0xFE, 0xD2, 0x66, 0xFE, 0xD2, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0D, 0x00, 0x00, 0x33, 0x35, 0x33, 0x15, 0x27, 0x35, 0x33, 0x11, 0x21, 0x35, 0x21, 0x17, 0x11, 0x07, 0xCA, 0x64, 0x64, 0xCA, 0xFE, 0xD0, 0x01, 0x30, 0x64, 0x64, 0x64, 0x64, 0xCA, 0x64, 0x01, 0x2E, 0x66, 0x66, 0xFE, 0xD2, 0x64, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x02, 0x5C, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x15, 0x00, 0x00, 0x01, 0x35, 0x23, 0x15, 0x03, 0x27, 0x11, 0x37, 0x21, 0x17, 0x11, 0x07, 0x23, 0x27, 0x35, 0x37, 0x33, 0x35, 0x21, 0x11, 0x21, 0x15, 0x01, 0xF8, 0x64, 0xCA, 0x66, 0x66, 0x01, 0x2E, 0x64, 0x64, 0x64, 0x66, 0x66, 0x64, 0xFE, 0xD2, 0x01, 0x92, 0x01, 0x2E, 0x66, 0x66, 0xFE, 0xD2, 0x64, 0x01, 0xF8, 0x66, 0x66, 0xFE, 0xD2, 0x64, 0x64, 0x66, 0x64, 0x64, 0xFE, 0x08, 0x64, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0D, 0x00, 0x00, 0x01, 0x35, 0x23, 0x15, 0x03, 0x11, 0x37, 0x33, 0x17, 0x11, 0x23, 0x11, 0x23, 0x11, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0xCA, 0x01, 0x94, 0xC8, 0xC8, 0xFE, 0x6C, 0x02, 0x5C, 0x66, 0x66, 0xFD, 0xA4, 0x01, 0x2E, 0xFE, 0xD2, 0x00, 0x00, 0x03, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x25, 0x35, 0x23, 0x15, 0x13, 0x35, 0x23, 0x15, 0x03, 0x11, 0x21, 0x17, 0x15, 0x23, 0x07, 0x17, 0x15, 0x07, 0x01, 0x94, 0xCA, 0xCA, 0xCA, 0x66, 0x01, 0x30, 0x64, 0x02, 0x30, 0x32, 0x64, 0x64, 0xCA, 0xCA, 0x01, 0x30, 0xC8, 0xC8, 0xFE, 0x6C, 0x02, 0xC2, 0x66, 0xC8, 0x34, 0x32, 0xCA, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0F, 0x00, 0x00, 0x33, 0x27, 0x11, 0x37, 0x33, 0x17, 0x15, 0x23, 0x35, 0x23, 0x11, 0x33, 0x35, 0x33, 0x15, 0x07, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0xCA, 0xCA, 0x64, 0x64, 0x64, 0x01, 0xF8, 0x66, 0x66, 0x64, 0x64, 0xFE, 0x08, 0x66, 0x66, 0x64, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x25, 0x11, 0x23, 0x11, 0x07, 0x11, 0x21, 0x17, 0x11, 0x07, 0x01, 0x94, 0xCA, 0x66, 0x01, 0x30, 0x64, 0x64, 0x64, 0x01, 0xF8, 0xFE, 0x08, 0x64, 0x02, 0xC2, 0x66, 0xFE, 0x08, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xC6, 0x02, 0xC2, 0x00, 0x0B, 0x00, 0x00, 0x33, 0x11, 0x21, 0x15, 0x23, 0x15, 0x33, 0x15, 0x23, 0x15, 0x33, 0x15, 0x64, 0x01, 0x62, 0xFC, 0xCA, 0xCA, 0xFC, 0x02, 0xC2, 0x66, 0xC8, 0x66, 0xCA, 0x64, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xC6, 0x02, 0xC2, 0x00, 0x09, 0x00, 0x00, 0x33, 0x11, 0x21, 0x15, 0x23, 0x15, 0x33, 0x15, 0x23, 0x11, 0x64, 0x01, 0x62, 0xFC, 0xCA, 0xCA, 0x02, 0xC2, 0x66, 0xC8, 0x66, 0xFE, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x11, 0x00, 0x00, 0x33, 0x27, 0x11, 0x37, 0x33, 0x17, 0x15, 0x23, 0x35, 0x23, 0x11, 0x33, 0x35, 0x23, 0x35, 0x33, 0x11, 0x07, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0xCA, 0xCA, 0x66, 0xCA, 0x64, 0x64, 0x01, 0xF8, 0x66, 0x66, 0x64, 0x64, 0xFE, 0x08, 0xCA, 0x66, 0xFE, 0xD0, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0B, 0x00, 0x00, 0x33, 0x11, 0x33, 0x11, 0x33, 0x11, 0x33, 0x11, 0x23, 0x11, 0x23, 0x11, 0x64, 0x66, 0xCA, 0x64, 0x64, 0xCA, 0x02, 0xC2, 0xFE, 0xD2, 0x01, 0x2E, 0xFD, 0x3E, 0x01, 0x2E, 0xFE, 0xD2, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x00, 0xCA, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x00, 0x33, 0x11, 0x33, 0x11, 0x64, 0x66, 0x02, 0xC2, 0xFD, 0x3E, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x2E, 0x02, 0xC2, 0x00, 0x06, 0x00, 0x00, 0x33, 0x35, 0x33, 0x11, 0x33, 0x11, 0x07, 0x64, 0x66, 0x64, 0x64, 0x64, 0x02, 0x5E, 0xFD, 0xA2, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x02, 0x2A, 0x02, 0xC2, 0x00, 0x0D, 0x00, 0x00, 0x33, 0x11, 0x33, 0x11, 0x33, 0x13, 0x33, 0x03, 0x15, 0x13, 0x23, 0x03, 0x23, 0x11, 0x64, 0x66, 0x64, 0x98, 0x64, 0x96, 0x96, 0x64, 0x98, 0x64, 0x02, 0xC2, 0xFE, 0xD2, 0x01, 0x2E, 0xFE, 0xD2, 0x66, 0xFE, 0xD2, 0x01, 0x2E, 0xFE, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xC6, 0x02, 0xC2, 0x00, 0x05, 0x00, 0x00, 0x33, 0x11, 0x33, 0x11, 0x33, 0x15, 0x64, 0x66, 0xFC, 0x02, 0xC2, 0xFD, 0xA2, 0x64, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x02, 0xC2, 0x02, 0xC2, 0x00, 0x0C, 0x00, 0x00, 0x33, 0x11, 0x33, 0x1B, 0x01, 0x33, 0x11, 0x23, 0x11, 0x03, 0x23, 0x03, 0x11, 0x64, 0x98, 0x98, 0x96, 0x98, 0x66, 0x96, 0x66, 0x96, 0x02, 0xC2, 0xFE, 0xD2, 0x01, 0x2E, 0xFD, 0x3E, 0x02, 0x5C, 0xFE, 0xD2, 0x01, 0x2E, 0xFD, 0xA4, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x02, 0x5C, 0x02, 0xC2, 0x00, 0x09, 0x00, 0x00, 0x33, 0x11, 0x33, 0x13, 0x11, 0x33, 0x11, 0x23, 0x01, 0x11, 0x64, 0x98, 0xFC, 0x64, 0x64, 0xFE, 0xD2, 0x02, 0xC2, 0xFE, 0x08, 0x01, 0xF8, 0xFD, 0x3E, 0x02, 0x5C, 0xFD, 0xA4, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x02, 0x5C, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x25, 0x11, 0x21, 0x11, 0x15, 0x27, 0x11, 0x37, 0x21, 0x17, 0x11, 0x07, 0x01, 0xF8, 0xFE, 0xD2, 0x66, 0x66, 0x01, 0x2E, 0x64, 0x64, 0x64, 0x01, 0xF8, 0xFE, 0x08, 0x64, 0x64, 0x01, 0xF8, 0x66, 0x66, 0xFE, 0x08, 0x64, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x01, 0x35, 0x23, 0x15, 0x03, 0x11, 0x21, 0x17, 0x15, 0x07, 0x23, 0x11, 0x01, 0x94, 0xCA, 0x66, 0x01, 0x30, 0x64, 0x64, 0xCA, 0x01, 0x94, 0xC8, 0xC8, 0xFE, 0x6C, 0x02, 0xC2, 0x66, 0xC8, 0x66, 0xFE, 0xD2, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0xFF, 0x9C, 0x02, 0x5C, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x00, 0x25, 0x11, 0x21, 0x11, 0x05, 0x27, 0x23, 0x27, 0x11, 0x37, 0x21, 0x17, 0x11, 0x07, 0x17, 0x01, 0xF8, 0xFE, 0xD2, 0x01, 0x2E, 0x64, 0xCA, 0x66, 0x66, 0x01, 0x2E, 0x64, 0x64, 0x64, 0x64, 0x01, 0xF8, 0xFE, 0x08, 0xC8, 0x64, 0x64, 0x01, 0xF8, 0x66, 0x66, 0xFE, 0x08, 0x64, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x02, 0x2A, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x00, 0x01, 0x35, 0x23, 0x15, 0x03, 0x11, 0x21, 0x17, 0x15, 0x07, 0x13, 0x23, 0x03, 0x23, 0x11, 0x01, 0x94, 0xCA, 0x66, 0x01, 0x30, 0x64, 0x64, 0x96, 0x64, 0x98, 0x64, 0x01, 0x94, 0xC8, 0xC8, 0xFE, 0x6C, 0x02, 0xC2, 0x66, 0xC8, 0x66, 0xFE, 0xD2, 0x01, 0x2E, 0xFE, 0xD2, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x15, 0x00, 0x00, 0x33, 0x27, 0x35, 0x33, 0x15, 0x33, 0x35, 0x23, 0x27, 0x35, 0x37, 0x33, 0x17, 0x15, 0x23, 0x35, 0x23, 0x15, 0x33, 0x17, 0x15, 0x07, 0xCA, 0x66, 0x66, 0xCA, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0xCA, 0xCA, 0x64, 0x64, 0x64, 0x66, 0x66, 0xCA, 0x66, 0xC8, 0x66, 0x66, 0x64, 0x64, 0xC8, 0x66, 0xCA, 0x64, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x02, 0x5C, 0x02, 0xC2, 0x00, 0x07, 0x00, 0x00, 0x21, 0x11, 0x23, 0x35, 0x21, 0x15, 0x23, 0x11, 0x01, 0x2E, 0xCA, 0x01, 0xF8, 0xC8, 0x02, 0x5C, 0x66, 0x66, 0xFD, 0xA4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x09, 0x00, 0x00, 0x33, 0x27, 0x11, 0x33, 0x11, 0x33, 0x11, 0x33, 0x11, 0x07, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x64, 0x02, 0x5E, 0xFD, 0xA2, 0x02, 0x5E, 0xFD, 0xA2, 0x64, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0A, 0x00, 0x00, 0x33, 0x03, 0x11, 0x33, 0x11, 0x17, 0x37, 0x11, 0x33, 0x11, 0x03, 0xFC, 0x98, 0x66, 0x64, 0x66, 0x64, 0x98, 0x01, 0x2E, 0x01, 0x94, 0xFE, 0x6C, 0xCA, 0xCA, 0x01, 0x94, 0xFE, 0x6C, 0xFE, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x03, 0x26, 0x02, 0xC2, 0x00, 0x12, 0x00, 0x00, 0x33, 0x03, 0x11, 0x33, 0x11, 0x17, 0x37, 0x11, 0x33, 0x11, 0x17, 0x37, 0x11, 0x33, 0x11, 0x03, 0x23, 0x27, 0x07, 0xFC, 0x98, 0x66, 0x64, 0x66, 0x64, 0x64, 0x66, 0x64, 0x96, 0x66, 0x64, 0x66, 0x01, 0x2E, 0x01, 0x94, 0xFE, 0x6C, 0xCA, 0xCA, 0x01, 0x2E, 0xFE, 0xD2, 0xCA, 0xCA, 0x01, 0x94, 0xFE, 0x6C, 0xFE, 0xD2, 0xCA, 0xCA, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x02, 0x2A, 0x02, 0xC2, 0x00, 0x0D, 0x00, 0x00, 0x33, 0x13, 0x35, 0x03, 0x33, 0x1B, 0x01, 0x33, 0x03, 0x15, 0x13, 0x23, 0x0B, 0x01, 0x32, 0x98, 0x98, 0x66, 0x96, 0x98, 0x64, 0x96, 0x96, 0x64, 0x98, 0x96, 0x01, 0x2E, 0x66, 0x01, 0x2E, 0xFE, 0xD2, 0x01, 0x2E, 0xFE, 0xD2, 0x66, 0xFE, 0xD2, 0x01, 0x2E, 0xFE, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x02, 0x2A, 0x02, 0xC2, 0x00, 0x0C, 0x00, 0x00, 0x33, 0x35, 0x03, 0x35, 0x33, 0x15, 0x1B, 0x01, 0x35, 0x33, 0x15, 0x03, 0x15, 0xFC, 0xCA, 0x66, 0x96, 0x98, 0x64, 0xCA, 0xCA, 0x01, 0x92, 0x66, 0x66, 0xFE, 0xD2, 0x01, 0x2E, 0x66, 0x66, 0xFE, 0x6E, 0xCA, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x09, 0x00, 0x00, 0x33, 0x35, 0x13, 0x23, 0x35, 0x21, 0x15, 0x03, 0x21, 0x15, 0x64, 0xFC, 0xFC, 0x01, 0x62, 0xFC, 0x01, 0x2E, 0x64, 0x01, 0xF8, 0x66, 0x66, 0xFE, 0x08, 0x64, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x9C, 0x01, 0x94, 0x03, 0x26, 0x00, 0x07, 0x00, 0x00, 0x17, 0x11, 0x21, 0x15, 0x23, 0x11, 0x33, 0x15, 0x64, 0x01, 0x30, 0xCA, 0xCA, 0x64, 0x03, 0x8A, 0x64, 0xFD, 0x3E, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC6, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x00, 0x21, 0x01, 0x33, 0x01, 0x01, 0x60, 0xFE, 0xA0, 0x64, 0x01, 0x62, 0x02, 0xC2, 0xFD, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x9C, 0x01, 0x94, 0x03, 0x26, 0x00, 0x07, 0x00, 0x00, 0x17, 0x35, 0x33, 0x11, 0x23, 0x35, 0x21, 0x11, 0x64, 0xCA, 0xCA, 0x01, 0x30, 0x64, 0x64, 0x02, 0xC2, 0x64, 0xFC, 0x76, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x01, 0xF8, 0x02, 0xC2, 0x03, 0x26, 0x00, 0x05, 0x00, 0x00, 0x13, 0x09, 0x01, 0x23, 0x27, 0x07, 0x64, 0x01, 0x30, 0x01, 0x2E, 0x66, 0xC8, 0xCA, 0x01, 0xF8, 0x01, 0x2E, 0xFE, 0xD2, 0xCA, 0xCA, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x00, 0x64, 0x00, 0x03, 0x00, 0x00, 0x33, 0x35, 0x21, 0x15, 0x64, 0x01, 0x94, 0x64, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0x02, 0x5C, 0x01, 0x94, 0x03, 0x26, 0x00, 0x03, 0x00, 0x00, 0x01, 0x27, 0x33, 0x17, 0x01, 0x2E, 0xCA, 0x66, 0xCA, 0x02, 0x5C, 0xCA, 0xCA, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x00, 0x25, 0x35, 0x23, 0x1D, 0x01, 0x27, 0x35, 0x37, 0x33, 0x35, 0x21, 0x35, 0x21, 0x17, 0x11, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0xFE, 0xD0, 0x01, 0x30, 0x64, 0x64, 0x66, 0x66, 0x64, 0x64, 0x66, 0x64, 0x66, 0x64, 0x64, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x25, 0x11, 0x23, 0x11, 0x07, 0x11, 0x33, 0x15, 0x33, 0x17, 0x11, 0x07, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0x64, 0x02, 0xC2, 0xCA, 0x64, 0xFE, 0xD0, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x94, 0x01, 0xF8, 0x00, 0x09, 0x00, 0x00, 0x33, 0x27, 0x11, 0x37, 0x33, 0x15, 0x23, 0x11, 0x33, 0x15, 0xCA, 0x66, 0x66, 0xCA, 0xCA, 0xCA, 0x64, 0x01, 0x30, 0x64, 0x64, 0xFE, 0xD0, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x25, 0x11, 0x23, 0x11, 0x15, 0x27, 0x11, 0x37, 0x33, 0x35, 0x33, 0x11, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0x64, 0x64, 0x01, 0x30, 0x64, 0xCA, 0xFD, 0x3E, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x00, 0x01, 0x35, 0x23, 0x15, 0x11, 0x27, 0x11, 0x37, 0x33, 0x17, 0x15, 0x21, 0x15, 0x21, 0x15, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0xFE, 0xD2, 0x01, 0x2E, 0x01, 0x2E, 0x66, 0x66, 0xFE, 0xD2, 0x64, 0x01, 0x30, 0x64, 0x64, 0xCA, 0x66, 0x64, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x94, 0x02, 0xC2, 0x00, 0x0A, 0x00, 0x00, 0x33, 0x11, 0x37, 0x33, 0x15, 0x23, 0x15, 0x33, 0x15, 0x23, 0x11, 0x64, 0x66, 0xCA, 0xCA, 0xCA, 0xCA, 0x02, 0x5C, 0x66, 0x66, 0x64, 0x64, 0xFE, 0x6C, 0x00, 0x00, 0x02, 0x00, 0x64, 0xFF, 0x36, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x0D, 0x00, 0x00, 0x25, 0x11, 0x23, 0x19, 0x01, 0x35, 0x33, 0x35, 0x23, 0x27, 0x11, 0x37, 0x21, 0x11, 0x01, 0x94, 0xCA, 0xCA, 0xCA, 0x66, 0x66, 0x01, 0x2E, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0xFE, 0xD2, 0x66, 0x64, 0x64, 0x01, 0x30, 0x64, 0xFD, 0x3E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0A, 0x00, 0x00, 0x33, 0x11, 0x33, 0x15, 0x33, 0x17, 0x11, 0x23, 0x11, 0x23, 0x11, 0x64, 0x66, 0xCA, 0x64, 0x64, 0xCA, 0x02, 0xC2, 0xCA, 0x64, 0xFE, 0x6C, 0x01, 0x94, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x00, 0xCA, 0x02, 0xC2, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x33, 0x11, 0x33, 0x11, 0x03, 0x35, 0x33, 0x15, 0x64, 0x66, 0x66, 0x66, 0x01, 0xF8, 0xFE, 0x08, 0x02, 0x5C, 0x66, 0x66, 0x00, 0x02, 0x00, 0x00, 0xFF, 0x36, 0x01, 0x2E, 0x02, 0xC2, 0x00, 0x06, 0x00, 0x0A, 0x00, 0x00, 0x15, 0x35, 0x33, 0x11, 0x33, 0x11, 0x07, 0x11, 0x35, 0x33, 0x15, 0xCA, 0x64, 0x64, 0x64, 0xCA, 0x66, 0x02, 0x5C, 0xFD, 0xA4, 0x66, 0x03, 0x26, 0x66, 0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x02, 0xC2, 0x00, 0x0D, 0x00, 0x00, 0x33, 0x11, 0x33, 0x11, 0x33, 0x37, 0x33, 0x07, 0x15, 0x17, 0x23, 0x27, 0x23, 0x15, 0x64, 0x66, 0x64, 0x66, 0x64, 0x64, 0x64, 0x64, 0x66, 0x64, 0x02, 0xC2, 0xFE, 0x6C, 0xCA, 0xCA, 0x64, 0xCA, 0xCA, 0xCA, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x2E, 0x02, 0xC2, 0x00, 0x06, 0x00, 0x00, 0x33, 0x27, 0x11, 0x33, 0x11, 0x33, 0x15, 0xCA, 0x66, 0x66, 0x64, 0x64, 0x02, 0x5E, 0xFD, 0xA2, 0x64, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x03, 0x26, 0x01, 0xF8, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x00, 0x33, 0x11, 0x21, 0x17, 0x11, 0x23, 0x11, 0x23, 0x11, 0x21, 0x11, 0x23, 0x35, 0x33, 0x17, 0x11, 0x64, 0x01, 0x30, 0x64, 0x64, 0xCA, 0x01, 0xF8, 0xCA, 0xCA, 0x64, 0x01, 0xF8, 0x64, 0xFE, 0x6C, 0x01, 0x94, 0xFE, 0x6C, 0x01, 0x94, 0x64, 0x64, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x08, 0x00, 0x00, 0x33, 0x11, 0x21, 0x17, 0x11, 0x23, 0x11, 0x23, 0x11, 0x64, 0x01, 0x30, 0x64, 0x64, 0xCA, 0x01, 0xF8, 0x64, 0xFE, 0x6C, 0x01, 0x94, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x25, 0x11, 0x23, 0x11, 0x15, 0x27, 0x11, 0x37, 0x33, 0x17, 0x11, 0x07, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0x64, 0x64, 0x01, 0x30, 0x64, 0x64, 0xFE, 0xD0, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0xFF, 0x36, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x25, 0x11, 0x23, 0x11, 0x03, 0x11, 0x37, 0x33, 0x17, 0x11, 0x07, 0x23, 0x15, 0x01, 0x94, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0xCA, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0xFE, 0xD2, 0x02, 0x5E, 0x64, 0x64, 0xFE, 0xD0, 0x64, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0xFF, 0x36, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x25, 0x11, 0x23, 0x11, 0x13, 0x35, 0x23, 0x27, 0x11, 0x37, 0x33, 0x17, 0x11, 0x01, 0x94, 0xCA, 0xCA, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x01, 0x30, 0xFE, 0xD0, 0xFE, 0xD2, 0xCA, 0x64, 0x01, 0x30, 0x64, 0x64, 0xFD, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x94, 0x01, 0xF8, 0x00, 0x09, 0x00, 0x00, 0x33, 0x11, 0x33, 0x15, 0x37, 0x33, 0x15, 0x23, 0x07, 0x11, 0x64, 0x66, 0x64, 0x66, 0x66, 0x64, 0x01, 0xF8, 0x64, 0x64, 0x64, 0x66, 0xFE, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x0F, 0x00, 0x00, 0x33, 0x35, 0x21, 0x35, 0x23, 0x27, 0x35, 0x37, 0x21, 0x15, 0x21, 0x15, 0x33, 0x17, 0x15, 0x07, 0x64, 0x01, 0x30, 0xCA, 0x66, 0x66, 0x01, 0x2E, 0xFE, 0xD2, 0xCA, 0x64, 0x64, 0x64, 0x66, 0x64, 0x66, 0x64, 0x64, 0x66, 0x64, 0x66, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2E, 0x02, 0x5C, 0x00, 0x0E, 0x00, 0x00, 0x33, 0x27, 0x11, 0x23, 0x35, 0x33, 0x35, 0x33, 0x15, 0x33, 0x15, 0x23, 0x11, 0x33, 0x15, 0xCA, 0x66, 0x64, 0x64, 0x66, 0x64, 0x64, 0x64, 0x64, 0x01, 0x30, 0x64, 0x64, 0x64, 0x64, 0xFE, 0xD0, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x08, 0x00, 0x00, 0x33, 0x27, 0x11, 0x33, 0x11, 0x33, 0x11, 0x33, 0x11, 0xCA, 0x66, 0x66, 0xCA, 0x64, 0x64, 0x01, 0x94, 0xFE, 0x6C, 0x01, 0x94, 0xFE, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x0A, 0x00, 0x00, 0x33, 0x03, 0x35, 0x33, 0x15, 0x17, 0x37, 0x35, 0x33, 0x15, 0x03, 0xFC, 0x98, 0x66, 0x64, 0x66, 0x64, 0x98, 0x01, 0x2E, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xFE, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x03, 0x26, 0x01, 0xF8, 0x00, 0x12, 0x00, 0x00, 0x33, 0x03, 0x35, 0x33, 0x15, 0x17, 0x37, 0x35, 0x33, 0x15, 0x17, 0x37, 0x35, 0x33, 0x15, 0x03, 0x23, 0x27, 0x07, 0xFC, 0x98, 0x66, 0x64, 0x66, 0x64, 0x64, 0x66, 0x64, 0x96, 0x66, 0x64, 0x66, 0x01, 0x2E, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xFE, 0xD2, 0xCA, 0xCA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x01, 0xC6, 0x01, 0xF8, 0x00, 0x0D, 0x00, 0x00, 0x33, 0x37, 0x35, 0x27, 0x33, 0x17, 0x37, 0x33, 0x07, 0x15, 0x17, 0x23, 0x27, 0x07, 0x32, 0x66, 0x66, 0x66, 0x64, 0x64, 0x66, 0x66, 0x66, 0x66, 0x64, 0x64, 0xCA, 0x64, 0xCA, 0xCA, 0xCA, 0xCA, 0x64, 0xCA, 0xCA, 0xCA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x36, 0x01, 0xF8, 0x01, 0xF8, 0x00, 0x0B, 0x00, 0x00, 0x17, 0x37, 0x03, 0x35, 0x33, 0x15, 0x17, 0x37, 0x35, 0x33, 0x15, 0x03, 0x98, 0x64, 0x98, 0x66, 0x64, 0x66, 0x64, 0xFC, 0xCA, 0xCA, 0x01, 0x2E, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0xFE, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0x00, 0x01, 0x94, 0x01, 0xF8, 0x00, 0x09, 0x00, 0x00, 0x33, 0x35, 0x13, 0x23, 0x35, 0x21, 0x15, 0x03, 0x33, 0x15, 0x98, 0x96, 0xCA, 0x01, 0x30, 0x98, 0x98, 0x64, 0x01, 0x30, 0x64, 0x64, 0xFE, 0xD0, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x9C, 0x01, 0xF8, 0x03, 0x26, 0x00, 0x11, 0x00, 0x00, 0x05, 0x27, 0x35, 0x27, 0x35, 0x37, 0x35, 0x37, 0x33, 0x15, 0x23, 0x15, 0x07, 0x15, 0x17, 0x15, 0x33, 0x15, 0x01, 0x2E, 0x64, 0x66, 0x66, 0x64, 0xCA, 0xCA, 0x64, 0x64, 0xCA, 0x64, 0x64, 0xCA, 0x64, 0x66, 0x64, 0xCA, 0x64, 0x64, 0xCA, 0x64, 0x66, 0x64, 0xCA, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x9C, 0x00, 0xCA, 0x03, 0x26, 0x00, 0x03, 0x00, 0x00, 0x17, 0x11, 0x33, 0x11, 0x64, 0x66, 0x64, 0x03, 0x8A, 0xFC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0xFF, 0x9C, 0x01, 0xF8, 0x03, 0x26, 0x00, 0x11, 0x00, 0x00, 0x17, 0x35, 0x33, 0x35, 0x37, 0x35, 0x27, 0x35, 0x23, 0x35, 0x33, 0x17, 0x15, 0x17, 0x15, 0x07, 0x15, 0x07, 0x64, 0xCA, 0x66, 0x66, 0xCA, 0xCA, 0x66, 0x64, 0x64, 0x66, 0x64, 0x64, 0xCA, 0x64, 0x66, 0x64, 0xCA, 0x64, 0x64, 0xCA, 0x64, 0x66, 0x64, 0xCA, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x00, 0xCA, 0x02, 0x5C, 0x01, 0xF8, 0x00, 0x09, 0x00, 0x00, 0x37, 0x35, 0x37, 0x21, 0x35, 0x33, 0x15, 0x07, 0x21, 0x15, 0x64, 0x66, 0x01, 0x2E, 0x64, 0x64, 0xFE, 0xD2, 0xCA, 0x64, 0x66, 0x64, 0x64, 0x66, 0x64, 0x00, 0x00, 0x01, 0x00, 0x64, 0x01, 0xF8, 0x00, 0xFC, 0x02, 0xC2, 0x00, 0x05, 0x00, 0x00, 0x13, 0x35, 0x37, 0x33, 0x07, 0x15, 0x64, 0x34, 0x64, 0x32, 0x01, 0xF8, 0x64, 0x66, 0x66, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, 0x01, 0xF8, 0x00, 0xCA, 0x02, 0xC2, 0x00, 0x05, 0x00, 0x00, 0x13, 0x37, 0x35, 0x33, 0x15, 0x07, 0x32, 0x32, 0x66, 0x32, 0x01, 0xF8, 0x64, 0x66, 0x66, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x01, 0xF8, 0x01, 0xC6, 0x02, 0xC2, 0x00, 0x05, 0x00, 0x0B, 0x00, 0x00, 0x13, 0x35, 0x37, 0x33, 0x07, 0x15, 0x33, 0x35, 0x37, 0x33, 0x07, 0x15, 0x64, 0x34, 0x64, 0x32, 0x64, 0x32, 0x66, 0x32, 0x01, 0xF8, 0x64, 0x66, 0x66, 0x64, 0x64, 0x66, 0x66, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x32, 0x01, 0xF8, 0x01, 0x94, 0x02, 0xC2, 0x00, 0x05, 0x00, 0x0B, 0x00, 0x00, 0x13, 0x37, 0x35, 0x33, 0x15, 0x07, 0x33, 0x37, 0x35, 0x33, 0x15, 0x07, 0x32, 0x32, 0x66, 0x32, 0x64, 0x32, 0x66, 0x34, 0x01, 0xF8, 0x64, 0x66, 0x66, 0x64, 0x64, 0x66, 0x66, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x28, 0x03, 0x16, 0x03, 0x3C, 0x00, 0x09, 0x00, 0x0D, 0x00, 0x11, 0x00, 0x00, 0x01, 0x35, 0x33, 0x35, 0x23, 0x35, 0x33, 0x17, 0x15, 0x0F, 0x01, 0x35, 0x33, 0x15, 0x03, 0x09, 0x02, 0x01, 0x5A, 0x88, 0xCA, 0xCA, 0x44, 0x44, 0x88, 0x44, 0x12, 0xFE, 0x74, 0x01, 0x7E, 0x01, 0x98, 0x01, 0x24, 0x4C, 0xE2, 0x4C, 0x4C, 0xE2, 0x4C, 0x98, 0x4C, 0x4C, 0x02, 0xB0, 0xFE, 0x8A, 0xFE, 0x62, 0x01, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x6E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x52, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x8D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0xA6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x28, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0B, 0x01, 0x6B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0C, 0x01, 0x91, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x3C, 0x02, 0x18, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x15, 0x02, 0x81, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x08, 0x02, 0xA9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x2D, 0x03, 0x0E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x17, 0x03, 0x6C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x31, 0x03, 0xE8, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x21, 0x04, 0x5E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x29, 0x04, 0xD4, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x01, 0x00, 0x10, 0x00, 0x7B, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x02, 0x00, 0x0E, 0x00, 0x96, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x03, 0x00, 0x50, 0x00, 0xAE, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x04, 0x00, 0x1A, 0x01, 0x29, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x05, 0x00, 0x16, 0x01, 0x53, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x06, 0x00, 0x18, 0x01, 0x77, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x07, 0x00, 0x78, 0x01, 0x9E, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x08, 0x00, 0x2A, 0x02, 0x55, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x09, 0x00, 0x10, 0x02, 0x97, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x0A, 0x00, 0x5A, 0x02, 0xB2, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x0B, 0x00, 0x2E, 0x03, 0x3C, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x0C, 0x00, 0x62, 0x03, 0x84, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x0D, 0x00, 0x42, 0x04, 0x1A, 0x00, 0x03, 0x00, 0x01, 0x04, 0x09, 0x00, 0x13, 0x00, 0x52, 0x04, 0x80, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x79, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x75, 0x00, 0x73, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x20, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x36, 0x00, 0x00, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6D, 0x61, 0x74, 0x75, 0x73, 0x6E, 0x6F, 0x76, 0x20, 0x61, 0x74, 0x20, 0x67, 0x6D, 0x61, 0x69, 0x6C, 0x20, 0x64, 0x6F, 0x74, 0x20, 0x63, 0x6F, 0x6D, 0x20, 0x32, 0x30, 0x31, 0x36, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x00, 0x46, 0x69, 0x6E, 0x65, 0x46, 0x6F, 0x6E, 0x74, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x72, 0x00, 0x00, 0x52, 0x65, 0x67, 0x75, 0x6C, 0x61, 0x72, 0x00, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x32, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x20, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x46, 0x00, 0x72, 0x00, 0x61, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x33, 0x00, 0x2D, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x36, 0x00, 0x00, 0x46, 0x6F, 0x6E, 0x74, 0x46, 0x6F, 0x72, 0x67, 0x65, 0x20, 0x32, 0x2E, 0x30, 0x20, 0x3A, 0x20, 0x46, 0x72, 0x61, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x4D, 0x6F, 0x6E, 0x6F, 0x20, 0x3A, 0x20, 0x34, 0x2D, 0x33, 0x2D, 0x32, 0x30, 0x31, 0x36, 0x00, 0x00, 0x46, 0x00, 0x72, 0x00, 0x61, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x00, 0x46, 0x72, 0x61, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x4D, 0x6F, 0x6E, 0x6F, 0x00, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x00, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x2E, 0x30, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x00, 0x46, 0x69, 0x6E, 0x65, 0x46, 0x6F, 0x6E, 0x74, 0x4D, 0x6F, 0x6E, 0x6F, 0x00, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x46, 0x00, 0x53, 0x00, 0x49, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x53, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x48, 0x00, 0x00, 0x46, 0x6F, 0x6E, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6D, 0x61, 0x72, 0x6B, 0x20, 0x6F, 0x66, 0x20, 0x46, 0x53, 0x49, 0x20, 0x46, 0x6F, 0x6E, 0x74, 0x53, 0x68, 0x6F, 0x70, 0x20, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x20, 0x47, 0x6D, 0x62, 0x48, 0x00, 0x00, 0x68, 0x00, 0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x3A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x75, 0x00, 0x73, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x00, 0x6D, 0x61, 0x74, 0x75, 0x73, 0x6E, 0x6F, 0x76, 0x00, 0x20, 0x1A, 0x00, 0xC4, 0x00, 0xFA, 0x00, 0x46, 0x00, 0x72, 0x00, 0x61, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6F, 0x20, 0x1A, 0x00, 0xC4, 0x00, 0xF9, 0x00, 0x20, 0x00, 0x77, 0x00, 0x61, 0x00, 0x73, 0x00, 0x20, 0x00, 0x62, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x20, 0x00, 0x77, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x00, 0xE2, 0x80, 0x9C, 0x46, 0x72, 0x61, 0x67, 0x6D, 0x65, 0x6E, 0x74, 0x4D, 0x6F, 0x6E, 0x6F, 0xE2, 0x80, 0x9D, 0x20, 0x77, 0x61, 0x73, 0x20, 0x62, 0x75, 0x69, 0x6C, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x46, 0x6F, 0x6E, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x0A, 0x00, 0x00, 0x68, 0x00, 0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x3A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x77, 0x00, 0x77, 0x00, 0x77, 0x00, 0x2E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x66, 0x6F, 0x6E, 0x74, 0x73, 0x68, 0x6F, 0x70, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x68, 0x00, 0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x3A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x2F, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x2F, 0x00, 0x73, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x2F, 0x00, 0x31, 0x00, 0x31, 0x00, 0x38, 0x00, 0x37, 0x00, 0x30, 0x00, 0x33, 0x00, 0x39, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x2F, 0x73, 0x68, 0x6F, 0x77, 0x2F, 0x31, 0x31, 0x38, 0x37, 0x30, 0x33, 0x39, 0x00, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x2D, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x72, 0x00, 0x63, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x46, 0x6F, 0x6E, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x4E, 0x6F, 0x6E, 0x2D, 0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6C, 0x20, 0x4C, 0x69, 0x63, 0x65, 0x6E, 0x73, 0x65, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x62, 0x00, 0x69, 0x00, 0x67, 0x00, 0x20, 0x00, 0x71, 0x00, 0x75, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x70, 0x00, 0x68, 0x00, 0x79, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6A, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x20, 0x00, 0x77, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x62, 0x00, 0x65, 0x00, 0x64, 0x00, 0x00, 0x46, 0x69, 0x76, 0x65, 0x20, 0x62, 0x69, 0x67, 0x20, 0x71, 0x75, 0x61, 0x63, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x7A, 0x65, 0x70, 0x68, 0x79, 0x72, 0x73, 0x20, 0x6A, 0x6F, 0x6C, 0x74, 0x20, 0x6D, 0x79, 0x20, 0x77, 0x61, 0x78, 0x20, 0x62, 0x65, 0x64, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x01, 0x02, 0x01, 0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00, 0x1D, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x00, 0x27, 0x00, 0x28, 0x00, 0x29, 0x00, 0x2A, 0x00, 0x2B, 0x00, 0x2C, 0x00, 0x2D, 0x00, 0x2E, 0x00, 0x2F, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x33, 0x00, 0x34, 0x00, 0x35, 0x00, 0x36, 0x00, 0x37, 0x00, 0x38, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3D, 0x00, 0x3E, 0x00, 0x3F, 0x00, 0x40, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00, 0x44, 0x00, 0x45, 0x00, 0x46, 0x00, 0x47, 0x00, 0x48, 0x00, 0x49, 0x00, 0x4A, 0x00, 0x4B, 0x00, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00, 0x53, 0x00, 0x54, 0x00, 0x55, 0x00, 0x56, 0x00, 0x57, 0x00, 0x58, 0x00, 0x59, 0x00, 0x5A, 0x00, 0x5B, 0x00, 0x5C, 0x00, 0x5D, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x60, 0x00, 0x61, 0x00, 0xB6, 0x00, 0xB7, 0x00, 0xB4, 0x00, 0xB5, 0x01, 0x04, 0x06, 0x67, 0x6C, 0x79, 0x70, 0x68, 0x31, 0x06, 0x67, 0x6C, 0x79, 0x70, 0x68, 0x32, 0x07, 0x75, 0x6E, 0x69, 0x46, 0x46, 0x46, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x16, 0x00, 0x1E, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x66, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x23, 0x46, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xD2, 0xFF, 0xCB, 0xE4};
const unsigned char* ffw::defaultFont = &defaultFontByteData[0];
const size_t ffw::defaultFontSize = sizeof(defaultFontByteData);
