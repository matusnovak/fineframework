/*** This file is part of FineFramework project ***/

#include "ffw/media/bmpsaver.h"
#include "ffw/math/functions.h"

static const unsigned char bmpGrayscale1Header[] = {0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF};
static const unsigned char bmpGrayscale4Header[] = {0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x00, 0x22, 0x22, 0x22, 0x00, 0x33, 0x33, 0x33, 0x00, 0x44, 0x44, 0x44, 0x00, 0x55, 0x55, 0x55, 0x00, 0x66, 0x66, 0x66, 0x00, 0x77, 0x77, 0x77, 0x00, 0x88, 0x88, 0x88, 0x00, 0x99, 0x99, 0x99, 0x00, 0xAA, 0xAA, 0xAA, 0x00, 0xBB, 0xBB, 0xBB, 0x00, 0xCC, 0xCC, 0xCC, 0x00, 0xDD, 0xDD, 0xDD, 0x00, 0xEE, 0xEE, 0xEE, 0x00, 0xFF, 0xFF, 0xFF, 0x00};
static const unsigned char bmpGrayscale8Header[] = {0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x02, 0x02, 0x02, 0x00, 0x03, 0x03, 0x03, 0x00, 0x04, 0x04, 0x04, 0x00, 0x05, 0x05, 0x05, 0x00, 0x06, 0x06, 0x06, 0x00, 0x07, 0x07, 0x07, 0x00, 0x08, 0x08, 0x08, 0x00, 0x09, 0x09, 0x09, 0x00, 0x0A, 0x0A, 0x0A, 0x00, 0x0B, 0x0B, 0x0B, 0x00, 0x0C, 0x0C, 0x0C, 0x00, 0x0D, 0x0D, 0x0D, 0x00, 0x0E, 0x0E, 0x0E, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x10, 0x10, 0x10, 0x00, 0x11, 0x11, 0x11, 0x00, 0x12, 0x12, 0x12, 0x00, 0x13, 0x13, 0x13, 0x00, 0x14, 0x14, 0x14, 0x00, 0x15, 0x15, 0x15, 0x00, 0x16, 0x16, 0x16, 0x00, 0x17, 0x17, 0x17, 0x00, 0x18, 0x18, 0x18, 0x00, 0x19, 0x19, 0x19, 0x00, 0x1A, 0x1A, 0x1A, 0x00, 0x1B, 0x1B, 0x1B, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x1D, 0x1D, 0x1D, 0x00, 0x1E, 0x1E, 0x1E, 0x00, 0x1F, 0x1F, 0x1F, 0x00, 0x20, 0x20, 0x20, 0x00, 0x21, 0x21, 0x21, 0x00, 0x22, 0x22, 0x22, 0x00, 0x23, 0x23, 0x23, 0x00, 0x24, 0x24, 0x24, 0x00, 0x25, 0x25, 0x25, 0x00, 0x26, 0x26, 0x26, 0x00, 0x27, 0x27, 0x27, 0x00, 0x28, 0x28, 0x28, 0x00, 0x29, 0x29, 0x29, 0x00, 0x2A, 0x2A, 0x2A, 0x00, 0x2B, 0x2B, 0x2B, 0x00, 0x2C, 0x2C, 0x2C, 0x00, 0x2D, 0x2D, 0x2D, 0x00, 0x2E, 0x2E, 0x2E, 0x00, 0x2F, 0x2F, 0x2F, 0x00, 0x30, 0x30, 0x30, 0x00, 0x31, 0x31, 0x31, 0x00, 0x32, 0x32, 0x32, 0x00, 0x33, 0x33, 0x33, 0x00, 0x34, 0x34, 0x34, 0x00, 0x35, 0x35, 0x35, 0x00, 0x36, 0x36, 0x36, 0x00, 0x37, 0x37, 0x37, 0x00, 0x38, 0x38, 0x38, 0x00, 0x39, 0x39, 0x39, 0x00, 0x3A, 0x3A, 0x3A, 0x00, 0x3B, 0x3B, 0x3B, 0x00, 0x3C, 0x3C, 0x3C, 0x00, 0x3D, 0x3D, 0x3D, 0x00, 0x3E, 0x3E, 0x3E, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x40, 0x40, 0x40, 0x00, 0x41, 0x41, 0x41, 0x00, 0x42, 0x42, 0x42, 0x00, 0x43, 0x43, 0x43, 0x00, 0x44, 0x44, 0x44, 0x00, 0x45, 0x45, 0x45, 0x00, 0x46, 0x46, 0x46, 0x00, 0x47, 0x47, 0x47, 0x00, 0x48, 0x48, 0x48, 0x00, 0x49, 0x49, 0x49, 0x00, 0x4A, 0x4A, 0x4A, 0x00, 0x4B, 0x4B, 0x4B, 0x00, 0x4C, 0x4C, 0x4C, 0x00, 0x4D, 0x4D, 0x4D, 0x00, 0x4E, 0x4E, 0x4E, 0x00, 0x4F, 0x4F, 0x4F, 0x00, 0x50, 0x50, 0x50, 0x00, 0x51, 0x51, 0x51, 0x00, 0x52, 0x52, 0x52, 0x00, 0x53, 0x53, 0x53, 0x00, 0x54, 0x54, 0x54, 0x00, 0x55, 0x55, 0x55, 0x00, 0x56, 0x56, 0x56, 0x00, 0x57, 0x57, 0x57, 0x00, 0x58, 0x58, 0x58, 0x00, 0x59, 0x59, 0x59, 0x00, 0x5A, 0x5A, 0x5A, 0x00, 0x5B, 0x5B, 0x5B, 0x00, 0x5C, 0x5C, 0x5C, 0x00, 0x5D, 0x5D, 0x5D, 0x00, 0x5E, 0x5E, 0x5E, 0x00, 0x5F, 0x5F, 0x5F, 0x00, 0x60, 0x60, 0x60, 0x00, 0x61, 0x61, 0x61, 0x00, 0x62, 0x62, 0x62, 0x00, 0x63, 0x63, 0x63, 0x00, 0x64, 0x64, 0x64, 0x00, 0x65, 0x65, 0x65, 0x00, 0x66, 0x66, 0x66, 0x00, 0x67, 0x67, 0x67, 0x00, 0x68, 0x68, 0x68, 0x00, 0x69, 0x69, 0x69, 0x00, 0x6A, 0x6A, 0x6A, 0x00, 0x6B, 0x6B, 0x6B, 0x00, 0x6C, 0x6C, 0x6C, 0x00, 0x6D, 0x6D, 0x6D, 0x00, 0x6E, 0x6E, 0x6E, 0x00, 0x6F, 0x6F, 0x6F, 0x00, 0x70, 0x70, 0x70, 0x00, 0x71, 0x71, 0x71, 0x00, 0x72, 0x72, 0x72, 0x00, 0x73, 0x73, 0x73, 0x00, 0x74, 0x74, 0x74, 0x00, 0x75, 0x75, 0x75, 0x00, 0x76, 0x76, 0x76, 0x00, 0x77, 0x77, 0x77, 0x00, 0x78, 0x78, 0x78, 0x00, 0x79, 0x79, 0x79, 0x00, 0x7A, 0x7A, 0x7A, 0x00, 0x7B, 0x7B, 0x7B, 0x00, 0x7C, 0x7C, 0x7C, 0x00, 0x7D, 0x7D, 0x7D, 0x00, 0x7E, 0x7E, 0x7E, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x80, 0x80, 0x80, 0x00, 0x81, 0x81, 0x81, 0x00, 0x82, 0x82, 0x82, 0x00, 0x83, 0x83, 0x83, 0x00, 0x84, 0x84, 0x84, 0x00, 0x85, 0x85, 0x85, 0x00, 0x86, 0x86, 0x86, 0x00, 0x87, 0x87, 0x87, 0x00, 0x88, 0x88, 0x88, 0x00, 0x89, 0x89, 0x89, 0x00, 0x8A, 0x8A, 0x8A, 0x00, 0x8B, 0x8B, 0x8B, 0x00, 0x8C, 0x8C, 0x8C, 0x00, 0x8D, 0x8D, 0x8D, 0x00, 0x8E, 0x8E, 0x8E, 0x00, 0x8F, 0x8F, 0x8F, 0x00, 0x90, 0x90, 0x90, 0x00, 0x91, 0x91, 0x91, 0x00, 0x92, 0x92, 0x92, 0x00, 0x93, 0x93, 0x93, 0x00, 0x94, 0x94, 0x94, 0x00, 0x95, 0x95, 0x95, 0x00, 0x96, 0x96, 0x96, 0x00, 0x97, 0x97, 0x97, 0x00, 0x98, 0x98, 0x98, 0x00, 0x99, 0x99, 0x99, 0x00, 0x9A, 0x9A, 0x9A, 0x00, 0x9B, 0x9B, 0x9B, 0x00, 0x9C, 0x9C, 0x9C, 0x00, 0x9D, 0x9D, 0x9D, 0x00, 0x9E, 0x9E, 0x9E, 0x00, 0x9F, 0x9F, 0x9F, 0x00, 0xA0, 0xA0, 0xA0, 0x00, 0xA1, 0xA1, 0xA1, 0x00, 0xA2, 0xA2, 0xA2, 0x00, 0xA3, 0xA3, 0xA3, 0x00, 0xA4, 0xA4, 0xA4, 0x00, 0xA5, 0xA5, 0xA5, 0x00, 0xA6, 0xA6, 0xA6, 0x00, 0xA7, 0xA7, 0xA7, 0x00, 0xA8, 0xA8, 0xA8, 0x00, 0xA9, 0xA9, 0xA9, 0x00, 0xAA, 0xAA, 0xAA, 0x00, 0xAB, 0xAB, 0xAB, 0x00, 0xAC, 0xAC, 0xAC, 0x00, 0xAD, 0xAD, 0xAD, 0x00, 0xAE, 0xAE, 0xAE, 0x00, 0xAF, 0xAF, 0xAF, 0x00, 0xB0, 0xB0, 0xB0, 0x00, 0xB1, 0xB1, 0xB1, 0x00, 0xB2, 0xB2, 0xB2, 0x00, 0xB3, 0xB3, 0xB3, 0x00, 0xB4, 0xB4, 0xB4, 0x00, 0xB5, 0xB5, 0xB5, 0x00, 0xB6, 0xB6, 0xB6, 0x00, 0xB7, 0xB7, 0xB7, 0x00, 0xB8, 0xB8, 0xB8, 0x00, 0xB9, 0xB9, 0xB9, 0x00, 0xBA, 0xBA, 0xBA, 0x00, 0xBB, 0xBB, 0xBB, 0x00, 0xBC, 0xBC, 0xBC, 0x00, 0xBD, 0xBD, 0xBD, 0x00, 0xBE, 0xBE, 0xBE, 0x00, 0xBF, 0xBF, 0xBF, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0xC1, 0xC1, 0xC1, 0x00, 0xC2, 0xC2, 0xC2, 0x00, 0xC3, 0xC3, 0xC3, 0x00, 0xC4, 0xC4, 0xC4, 0x00, 0xC5, 0xC5, 0xC5, 0x00, 0xC6, 0xC6, 0xC6, 0x00, 0xC7, 0xC7, 0xC7, 0x00, 0xC8, 0xC8, 0xC8, 0x00, 0xC9, 0xC9, 0xC9, 0x00, 0xCA, 0xCA, 0xCA, 0x00, 0xCB, 0xCB, 0xCB, 0x00, 0xCC, 0xCC, 0xCC, 0x00, 0xCD, 0xCD, 0xCD, 0x00, 0xCE, 0xCE, 0xCE, 0x00, 0xCF, 0xCF, 0xCF, 0x00, 0xD0, 0xD0, 0xD0, 0x00, 0xD1, 0xD1, 0xD1, 0x00, 0xD2, 0xD2, 0xD2, 0x00, 0xD3, 0xD3, 0xD3, 0x00, 0xD4, 0xD4, 0xD4, 0x00, 0xD5, 0xD5, 0xD5, 0x00, 0xD6, 0xD6, 0xD6, 0x00, 0xD7, 0xD7, 0xD7, 0x00, 0xD8, 0xD8, 0xD8, 0x00, 0xD9, 0xD9, 0xD9, 0x00, 0xDA, 0xDA, 0xDA, 0x00, 0xDB, 0xDB, 0xDB, 0x00, 0xDC, 0xDC, 0xDC, 0x00, 0xDD, 0xDD, 0xDD, 0x00, 0xDE, 0xDE, 0xDE, 0x00, 0xDF, 0xDF, 0xDF, 0x00, 0xE0, 0xE0, 0xE0, 0x00, 0xE1, 0xE1, 0xE1, 0x00, 0xE2, 0xE2, 0xE2, 0x00, 0xE3, 0xE3, 0xE3, 0x00, 0xE4, 0xE4, 0xE4, 0x00, 0xE5, 0xE5, 0xE5, 0x00, 0xE6, 0xE6, 0xE6, 0x00, 0xE7, 0xE7, 0xE7, 0x00, 0xE8, 0xE8, 0xE8, 0x00, 0xE9, 0xE9, 0xE9, 0x00, 0xEA, 0xEA, 0xEA, 0x00, 0xEB, 0xEB, 0xEB, 0x00, 0xEC, 0xEC, 0xEC, 0x00, 0xED, 0xED, 0xED, 0x00, 0xEE, 0xEE, 0xEE, 0x00, 0xEF, 0xEF, 0xEF, 0x00, 0xF0, 0xF0, 0xF0, 0x00, 0xF1, 0xF1, 0xF1, 0x00, 0xF2, 0xF2, 0xF2, 0x00, 0xF3, 0xF3, 0xF3, 0x00, 0xF4, 0xF4, 0xF4, 0x00, 0xF5, 0xF5, 0xF5, 0x00, 0xF6, 0xF6, 0xF6, 0x00, 0xF7, 0xF7, 0xF7, 0x00, 0xF8, 0xF8, 0xF8, 0x00, 0xF9, 0xF9, 0xF9, 0x00, 0xFA, 0xFA, 0xFA, 0x00, 0xFB, 0xFB, 0xFB, 0x00, 0xFC, 0xFC, 0xFC, 0x00, 0xFD, 0xFD, 0xFD, 0x00, 0xFE, 0xFE, 0xFE, 0x00, 0xFF, 0xFF, 0xFF, 0x00};

///=============================================================================
ffw::BmpSaver::BmpSaver(){
}

///=============================================================================
ffw::BmpSaver::BmpSaver(BmpSaver&& other){
	swap(other);
}

///=============================================================================
void ffw::BmpSaver::swap(BmpSaver& other){
	std::swap(output, other.output);
	std::swap(pixelsOffset, other.pixelsOffset);
}

///=============================================================================
ffw::BmpSaver& ffw::BmpSaver::operator = (BmpSaver&& other){
	if(this != &other){
		swap(other);
	}
	return *this;
}

///=============================================================================
ffw::BmpSaver::~BmpSaver(){
	close();
}

///=============================================================================
bool ffw::BmpSaver::open(const std::string& path, int w, int h, ffw::ImageType type, int quality){
	(void)quality;
	if(loaded)return false;
    if(w <= 0 || h <= 0)return false;
	quality = ffw::clamp(quality, 0, 100);

	switch(type){
		case ImageType::BITMAP_1:
		case ImageType::GRAYSCALE_8:
		case ImageType::GRAYSCALE_4:
		case ImageType::RGB_888:
		case ImageType::RGB_ALPHA_8888:
			break;
		default:
			return false;
	}

	output->open(path, std::ios::trunc | std::ios::out | std::ios::binary);

	if(!output->is_open()){
		//std::cerr << "Cannot open file: " << path << " for writing!" << std::endl;
        return false;
    }

	uint16_t fileType = 0x4D42;
    uint32_t fileSize;
    uint32_t reserved = 0x00000000;
    uint32_t dataOffset;
    uint32_t infoSize = 0x00000028;
    uint16_t planes = 0x0001;
    uint16_t bitsPerPixel;
    uint32_t compression = 0x00000000;
    uint32_t imageSize;
    uint32_t resolutionX = 0x00000B12;
    uint32_t resolutionY = 0x00000B12;
    uint32_t numberOfColors = 0x00000000;
    uint32_t importantColors = 0x00000000;

    format = type;
	width = w;
	height = h;

	switch(format){
		case ffw::ImageType::BITMAP_1: {
			size_t size = (width*height) / 8;
			if((width*height) % 8 > 0){
				size = (width*height) / 8 +1;
			}

			fileSize = 0x36 + 8 + size;
			dataOffset = 0x36 + 8;
			bitsPerPixel = 1;
			imageSize = size;
			break;
		}

		case ffw::ImageType::GRAYSCALE_4: {
			size_t size = (width*height) /2;
			if((width*height) % 2 > 0){
				size = (width*height) /2 +1;
			}

			fileSize = 0x36 + 64 + size;
			dataOffset = 0x36 + 64;
			bitsPerPixel = 4;
			imageSize = size;
			break;
		}

		case ffw::ImageType::GRAYSCALE_8: {
			fileSize = 0x36 + 1024 + width*height;
			dataOffset = 0x36 + 1024;
			bitsPerPixel = 8;
			imageSize = width*height;
			break;
		}

		case ffw::ImageType::RGB_888: {
			fileSize = 0x36 + width*height*3;
			dataOffset = 0x36;
			bitsPerPixel = 24;
			imageSize = width*height*3;
			break;
		}

		case ffw::ImageType::RGB_ALPHA_8888: {
			fileSize = 0x36 + width*height*4;
			dataOffset = 0x36;
			bitsPerPixel = 32;
			imageSize = width*height*4;
			break;
		}
		default: {
			close();
			return false;
		}
	}

	output->write((char*)&fileType,           sizeof(uint16_t));
    output->write((char*)&fileSize,           sizeof(uint32_t));
    output->write((char*)&reserved,           sizeof(uint32_t));
    output->write((char*)&dataOffset,         sizeof(uint32_t));
    output->write((char*)&infoSize,           sizeof(uint32_t));
    output->write((char*)&width,              sizeof(uint32_t));
    output->write((char*)&height,             sizeof(uint32_t));
    output->write((char*)&planes,             sizeof(uint16_t));
    output->write((char*)&bitsPerPixel,       sizeof(uint16_t));
    output->write((char*)&compression,        sizeof(uint32_t));
    output->write((char*)&imageSize,          sizeof(uint32_t));
    output->write((char*)&resolutionX,        sizeof(uint32_t));
    output->write((char*)&resolutionY,        sizeof(uint32_t));
    output->write((char*)&numberOfColors,     sizeof(uint32_t));
    output->write((char*)&importantColors,    sizeof(uint32_t));

	switch(format){
		case ffw::ImageType::BITMAP_1: {
			output->write((char*)&bmpGrayscale1Header[0], sizeof(bmpGrayscale1Header));
			break;
		}

		case ffw::ImageType::GRAYSCALE_4: {
			output->write((char*)&bmpGrayscale4Header[0], sizeof(bmpGrayscale4Header));
			break;
		}

		case ffw::ImageType::GRAYSCALE_8: {
			output->write((char*)&bmpGrayscale8Header[0], sizeof(bmpGrayscale8Header));
			break;
		}
		default: break;
	}

	pixelsOffset = (size_t)output->tellg();

	size_t offset = 4 - size_t(width * (getBitsPerPixel() / 8.0f)) % 4;
	if(format == ffw::ImageType::RGB_ALPHA_8888)offset = 0;
	size_t scanline = size_t(width * (getBitsPerPixel() / 8.0f)) + offset;

	// BMP is mirrored vertically
	// Write all pixels now and fill the pixels later
	for(size_t i = 0; i < size_t(height) * scanline; i++){
		static const char data = 0x00;
		output->write(&data, 1);
	}

	row = 0;
    loaded = true;
	return true;
}

///=============================================================================
void ffw::BmpSaver::close(){
	output->close();
	width = 0;
	height = 0;
	loaded = 0;
	row = 0;
	format = ImageType::INVALID;
}

///=============================================================================
size_t ffw::BmpSaver::writeRow(const void* src){
	if(!loaded)return 0;
    if(row >= height)return 0;
    if(src == NULL)return 0;

	size_t offset = 4 - size_t(width * (getBitsPerPixel() / 8.0f)) % 4;
	if(format == ffw::ImageType::RGB_ALPHA_8888)offset = 0;
	size_t scanline = size_t(width * (getBitsPerPixel() / 8.0f)) + offset;
	size_t rowOffset = height - row - 1;
	
	size_t size = 0;
	switch(format){
		case ffw::ImageType::BITMAP_1: {
			size = width / 8;
			if(width % 8 > 0)size++;

			//std::cout << "writing at: " << (pixelsOffset + rowOffset * scanline) << " size: " << size << std::endl;
			output->seekg(pixelsOffset + rowOffset * scanline);
			output->write((char*)src, size);

			break;
		}

		case ffw::ImageType::GRAYSCALE_4: {
			size = width /2;
			if(width % 2 > 0)size++;

			//std::cout << "writing at: " << (pixelsOffset + rowOffset * scanline) << std::endl;
			output->seekg(pixelsOffset + rowOffset * scanline);
			output->write((char*)src, size);

			break;
		}

		case ffw::ImageType::GRAYSCALE_8: {
			output->seekg(pixelsOffset + rowOffset * scanline);
			output->write((char*)src, width);

			break;
		}
		
		case ffw::ImageType::RGB_888: {
			output->seekg(pixelsOffset + rowOffset * scanline);
			const char* ptr = (const char*) src;
			for(size_t i = 0; i < size_t(scanline); i += 3){
				output->write(&ptr[i + 2], 1);
				output->write(&ptr[i + 1], 1);
				output->write(&ptr[i + 0], 1);
			}

			break;
		}

		case ffw::ImageType::RGB_ALPHA_8888: {
			output->seekg(pixelsOffset + rowOffset * scanline);
			output->write((const char*)src, scanline);
			const char* ptr = (const char*) src;
			for(size_t i = 0; i < size_t(scanline); i += 4){
				output->write(&ptr[i + 2], 1);
				output->write(&ptr[i + 1], 1);
				output->write(&ptr[i + 0], 1);
				output->write(&ptr[i + 3], 1);
			}

			break;
		}
		default: return 0;
	}

	row++;

	return this->getStrideSize();
}

///=============================================================================
bool ffw::BmpSaver::writeFooter(){
	if(!loaded)return false;
    if(row != height)return false;

	size_t offset = 4 - size_t(width * (getBitsPerPixel() / 8.0f)) % 4;
	if(format == ffw::ImageType::RGB_ALPHA_8888)offset = 0;
	size_t scanline = size_t(width * (getBitsPerPixel() / 8.0f)) + offset;

	output->seekg(pixelsOffset + height * scanline);

    static const uint16_t footer = 0x0000;
    output->write((char*)&footer, sizeof(uint16_t));

    return true;
}