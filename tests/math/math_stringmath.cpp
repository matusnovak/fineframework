#include <ffw/math/stringmath.h>
#include "../catch.hpp"

TEST_CASE("Testing UTF8 To WSTR and back #1", "[Unicode]") {
    // Samples taken from:
    // http://www.cl.cam.ac.uk/~mgk25/ucs/examples/quickbrown.txt

    // Danish
    static const std::string str = "\x51\x75\x69\x7A\x64\x65\x6C\x74\x61\x67\x65\x72\x6E\x65\x20\x73\x70\x69\x73\x74\x65\x20\x6A\x6F\x72\x64\x62\xC3\xA6\x72\x20\x6D\x65\x64\x20\x66\x6C\xC3\xB8\x64\x65\x2C\x20\x6D\x65\x6E\x73\x20\x63\x69\x72\x6B\x75\x73\x6B\x6C\x6F\x76\x6E\x65\x6E\x20\x57\x6F\x6C\x74\x68\x65\x72\x20\x73\x70\x69\x6C\x6C\x65\x64\x65\x20\x70\xC3\xA5\x20\x78\x79\x6C\x6F\x66\x6F\x6E\x2E";
    static const std::wstring wstr = L"\x0051\x0075\x0069\x007A\x0064\x0065\x006C\x0074\x0061\x0067\x0065\x0072\x006E\x0065\x0020\x0073\x0070\x0069\x0073\x0074\x0065\x0020\x006A\x006F\x0072\x0064\x0062\x00E6\x0072\x0020\x006D\x0065\x0064\x0020\x0066\x006C\x00F8\x0064\x0065\x002C\x0020\x006D\x0065\x006E\x0073\x0020\x0063\x0069\x0072\x006B\x0075\x0073\x006B\x006C\x006F\x0076\x006E\x0065\x006E\x0020\x0057\x006F\x006C\x0074\x0068\x0065\x0072\x0020\x0073\x0070\x0069\x006C\x006C\x0065\x0064\x0065\x0020\x0070\x00E5\x0020\x0078\x0079\x006C\x006F\x0066\x006F\x006E\x002E";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #2", "[Unicode]") {
    // German Part 1
    static const std::string str = "\x46\x61\x6C\x73\x63\x68\x65\x73\x20\xC3\x9C\x62\x65\x6E\x20\x76\x6F\x6E\x20\x58\x79\x6C\x6F\x70\x68\x6F\x6E\x6D\x75\x73\x69\x6B\x20\x71\x75\xC3\xA4\x6C\x74\x20\x6A\x65\x64\x65\x6E\x20\x67\x72\xC3\xB6\xC3\x9F\x65\x72\x65\x6E\x20\x5A\x77\x65\x72\x67\x20";
    static const std::wstring wstr = L"\x0046\x0061\x006C\x0073\x0063\x0068\x0065\x0073\x0020\x00DC\x0062\x0065\x006E\x0020\x0076\x006F\x006E\x0020\x0058\x0079\x006C\x006F\x0070\x0068\x006F\x006E\x006D\x0075\x0073\x0069\x006B\x0020\x0071\x0075\x00E4\x006C\x0074\x0020\x006A\x0065\x0064\x0065\x006E\x0020\x0067\x0072\x00F6\x00DF\x0065\x0072\x0065\x006E\x0020\x005A\x0077\x0065\x0072\x0067\x0020";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #3", "[Unicode]") {
    // German Part 2
    static const std::string str = "\x5A\x77\xC3\xB6\x6C\x66\x20\x42\x6F\x78\x6B\xC3\xA4\x6D\x70\x66\x65\x72\x20\x6A\x61\x67\x74\x65\x6E\x20\x45\x76\x61\x20\x71\x75\x65\x72\x20\xC3\xBC\x62\x65\x72\x20\x64\x65\x6E\x20\x53\x79\x6C\x74\x65\x72\x20\x44\x65\x69\x63\x68";
    static const std::wstring wstr = L"\x005A\x0077\x00F6\x006C\x0066\x0020\x0042\x006F\x0078\x006B\x00E4\x006D\x0070\x0066\x0065\x0072\x0020\x006A\x0061\x0067\x0074\x0065\x006E\x0020\x0045\x0076\x0061\x0020\x0071\x0075\x0065\x0072\x0020\x00FC\x0062\x0065\x0072\x0020\x0064\x0065\x006E\x0020\x0053\x0079\x006C\x0074\x0065\x0072\x0020\x0044\x0065\x0069\x0063\x0068";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #4", "[Unicode]") {
    // German Part 2
    static const std::string str = "\x48\x65\x69\x7A\xC3\xB6\x6C\x72\xC3\xBC\x63\x6B\x73\x74\x6F\xC3\x9F\x61\x62\x64\xC3\xA4\x6D\x70\x66\x75\x6E\x67";
    static const std::wstring wstr = L"\x0048\x0065\x0069\x007A\x00F6\x006C\x0072\x00FC\x0063\x006B\x0073\x0074\x006F\x00DF\x0061\x0062\x0064\x00E4\x006D\x0070\x0066\x0075\x006E\x0067";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #5", "[Unicode]") {
    // Greek Part 1
    static const std::string str = "\xCE\x93\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82\x20\xCE\xBA\xCE\xB1\xE1\xBD\xB6\x20\xCE\xBC\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82\x20\xCE\xB4\xE1\xBD\xB2\xCE\xBD\x20\xCE\xB8\xE1\xBD\xB0\x20\xCE\xB2\xCF\x81\xE1\xBF\xB6\x20\xCF\x80\xCE\xB9\xE1\xBD\xB0\x20\xCF\x83\xCF\x84\xE1\xBD\xB8\x20\xCF\x87\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6\x20\xCE\xBE\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF";
    static const std::wstring wstr = L"\x0393\x03B1\x03B6\x03AD\x03B5\x03C2\x0020\x03BA\x03B1\x1F76\x0020\x03BC\x03C5\x03C1\x03C4\x03B9\x1F72\x03C2\x0020\x03B4\x1F72\x03BD\x0020\x03B8\x1F70\x0020\x03B2\x03C1\x1FF6\x0020\x03C0\x03B9\x1F70\x0020\x03C3\x03C4\x1F78\x0020\x03C7\x03C1\x03C5\x03C3\x03B1\x03C6\x1F76\x0020\x03BE\x03AD\x03C6\x03C9\x03C4\x03BF";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #6", "[Unicode]") {
    // Greek Part 2
    static const std::string str = "\xCE\x9E\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89\x20\xCF\x84\xE1\xBD\xB4\xCE\xBD\x20\xCF\x88\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1\x20\xCE\xB2\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1";
    static const std::wstring wstr = L"\x039E\x03B5\x03C3\x03BA\x03B5\x03C0\x03AC\x03B6\x03C9\x0020\x03C4\x1F74\x03BD\x0020\x03C8\x03C5\x03C7\x03BF\x03C6\x03B8\x03CC\x03C1\x03B1\x0020\x03B2\x03B4\x03B5\x03BB\x03C5\x03B3\x03BC\x03AF\x03B1";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #7", "[Unicode]") {
    // English
    static const std::string str = "\x54\x68\x65\x20\x71\x75\x69\x63\x6B\x20\x62\x72\x6F\x77\x6E\x20\x66\x6F\x78\x20\x6A\x75\x6D\x70\x73\x20\x6F\x76\x65\x72\x20\x74\x68\x65\x20\x6C\x61\x7A\x79\x20\x64\x6F\x67";
    static const std::wstring wstr = L"\x0054\x0068\x0065\x0020\x0071\x0075\x0069\x0063\x006B\x0020\x0062\x0072\x006F\x0077\x006E\x0020\x0066\x006F\x0078\x0020\x006A\x0075\x006D\x0070\x0073\x0020\x006F\x0076\x0065\x0072\x0020\x0074\x0068\x0065\x0020\x006C\x0061\x007A\x0079\x0020\x0064\x006F\x0067";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #8", "[Unicode]") {
    // Spanish
    static const std::string str = "\x45\x6C\x20\x70\x69\x6E\x67\xC3\xBC\x69\x6E\x6F\x20\x57\x65\x6E\x63\x65\x73\x6C\x61\x6F\x20\x68\x69\x7A\x6F\x20\x6B\x69\x6C\xC3\xB3\x6D\x65\x74\x72\x6F\x73\x20\x62\x61\x6A\x6F\x20\x65\x78\x68\x61\x75\x73\x74\x69\x76\x61\x20\x6C\x6C\x75\x76\x69\x61\x20\x79\x20\x66\x72\xC3\xAD\x6F\x2C\x20\x61\xC3\xB1\x6F\x72\x61\x62\x61\x20\x61\x20\x73\x75\x20\x71\x75\x65\x72\x69\x64\x6F\x20\x63\x61\x63\x68\x6F\x72\x72\x6F\x2E";
    static const std::wstring wstr = L"\x0045\x006C\x0020\x0070\x0069\x006E\x0067\x00FC\x0069\x006E\x006F\x0020\x0057\x0065\x006E\x0063\x0065\x0073\x006C\x0061\x006F\x0020\x0068\x0069\x007A\x006F\x0020\x006B\x0069\x006C\x00F3\x006D\x0065\x0074\x0072\x006F\x0073\x0020\x0062\x0061\x006A\x006F\x0020\x0065\x0078\x0068\x0061\x0075\x0073\x0074\x0069\x0076\x0061\x0020\x006C\x006C\x0075\x0076\x0069\x0061\x0020\x0079\x0020\x0066\x0072\x00ED\x006F\x002C\x0020\x0061\x00F1\x006F\x0072\x0061\x0062\x0061\x0020\x0061\x0020\x0073\x0075\x0020\x0071\x0075\x0065\x0072\x0069\x0064\x006F\x0020\x0063\x0061\x0063\x0068\x006F\x0072\x0072\x006F\x002E";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #9", "[Unicode]") {
    // French
    static const std::string str = "\x4C\x65\x20\x63\xC5\x93\x75\x72\x20\x64\xC3\xA9\xC3\xA7\x75\x20\x6D\x61\x69\x73\x20\x6C\x27\xC3\xA2\x6D\x65\x20\x70\x6C\x75\x74\xC3\xB4\x74\x20\x6E\x61\xC3\xAF\x76\x65\x2C\x20\x4C\x6F\x75\xC3\xBF\x73\x20\x72\xC3\xAA\x76\x61\x20\x64\x65\x20\x63\x72\x61\x70\x61\xC3\xBC\x74\x65\x72\x20\x65\x6E\x20\x63\x61\x6E\x6F\xC3\xAB\x20\x61\x75\x20\x64\x65\x6C\xC3\xA0\x20\x64\x65\x73\x20\xC3\xAE\x6C\x65\x73\x2C\x20\x70\x72\xC3\xA8\x73\x20\x64\x75\x20\x6D\xC3\xA4\x6C\x73\x74\x72\xC3\xB6\x6D\x20\x6F\xC3\xB9\x20\x62\x72\xC3\xBB\x6C\x65\x6E\x74\x20\x6C\x65\x73\x20\x6E\x6F\x76\xC3\xA6\x2E";
    static const std::wstring wstr = L"\x004C\x0065\x0020\x0063\x0153\x0075\x0072\x0020\x0064\x00E9\x00E7\x0075\x0020\x006D\x0061\x0069\x0073\x0020\x006C\x0027\x00E2\x006D\x0065\x0020\x0070\x006C\x0075\x0074\x00F4\x0074\x0020\x006E\x0061\x00EF\x0076\x0065\x002C\x0020\x004C\x006F\x0075\x00FF\x0073\x0020\x0072\x00EA\x0076\x0061\x0020\x0064\x0065\x0020\x0063\x0072\x0061\x0070\x0061\x00FC\x0074\x0065\x0072\x0020\x0065\x006E\x0020\x0063\x0061\x006E\x006F\x00EB\x0020\x0061\x0075\x0020\x0064\x0065\x006C\x00E0\x0020\x0064\x0065\x0073\x0020\x00EE\x006C\x0065\x0073\x002C\x0020\x0070\x0072\x00E8\x0073\x0020\x0064\x0075\x0020\x006D\x00E4\x006C\x0073\x0074\x0072\x00F6\x006D\x0020\x006F\x00F9\x0020\x0062\x0072\x00FB\x006C\x0065\x006E\x0074\x0020\x006C\x0065\x0073\x0020\x006E\x006F\x0076\x00E6\x002E";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #10", "[Unicode]") {
    // Irish Galeic
    static const std::string str = "\x44\x27\x66\x68\x75\x61\x73\x63\x61\x69\x6C\x20\xC3\x8D\x6F\x73\x61\x2C\x20\xC3\x9A\x72\x6D\x68\x61\x63\x20\x6E\x61\x20\x68\xC3\x93\x69\x67\x68\x65\x20\x42\x65\x61\x6E\x6E\x61\x69\x74\x68\x65\x2C\x20\x70\xC3\xB3\x72\x20\xC3\x89\x61\x76\x61\x20\x61\x67\x75\x73\x20\xC3\x81\x64\x68\x61\x69\x6D\x68";
    static const std::wstring wstr = L"\x0044\x0027\x0066\x0068\x0075\x0061\x0073\x0063\x0061\x0069\x006C\x0020\x00CD\x006F\x0073\x0061\x002C\x0020\x00DA\x0072\x006D\x0068\x0061\x0063\x0020\x006E\x0061\x0020\x0068\x00D3\x0069\x0067\x0068\x0065\x0020\x0042\x0065\x0061\x006E\x006E\x0061\x0069\x0074\x0068\x0065\x002C\x0020\x0070\x00F3\x0072\x0020\x00C9\x0061\x0076\x0061\x0020\x0061\x0067\x0075\x0073\x0020\x00C1\x0064\x0068\x0061\x0069\x006D\x0068";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #11", "[Unicode]") {
    // Hungarian
    static const std::string str = "\xC3\x81\x72\x76\xC3\xAD\x7A\x74\xC5\xB1\x72\xC5\x91\x20\x74\xC3\xBC\x6B\xC3\xB6\x72\x66\xC3\xBA\x72\xC3\xB3\x67\xC3\xA9\x70";
    static const std::wstring wstr = L"\x00C1\x0072\x0076\x00ED\x007A\x0074\x0171\x0072\x0151\x0020\x0074\x00FC\x006B\x00F6\x0072\x0066\x00FA\x0072\x00F3\x0067\x00E9\x0070";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #12", "[Unicode]") {
    // Icelandic
    static const std::string str = "\x4B\xC3\xA6\x6D\x69\x20\x6E\xC3\xBD\x20\xC3\xB6\x78\x69\x20\x68\xC3\xA9\x72\x20\x79\x6B\x69\x73\x74\x20\xC3\xBE\x6A\xC3\xB3\x66\x75\x6D\x20\x6E\xC3\xBA\x20\x62\xC3\xA6\xC3\xB0\x69\x20\x76\xC3\xAD\x6C\x20\x6F\x67\x20\xC3\xA1\x64\x72\x65\x70\x61\x20\x53\xC3\xA6\x76\xC3\xB6\x72\x20\x67\x72\xC3\xA9\x74\x20\xC3\xA1\xC3\xB0\x61\x6E\x20\xC3\xBE\x76\xC3\xAD\x20\xC3\xBA\x6C\x70\x61\x6E\x20\x76\x61\x72\x20\xC3\xB3\x6E\xC3\xBD\x74";
    static const std::wstring wstr = L"\x004B\x00E6\x006D\x0069\x0020\x006E\x00FD\x0020\x00F6\x0078\x0069\x0020\x0068\x00E9\x0072\x0020\x0079\x006B\x0069\x0073\x0074\x0020\x00FE\x006A\x00F3\x0066\x0075\x006D\x0020\x006E\x00FA\x0020\x0062\x00E6\x00F0\x0069\x0020\x0076\x00ED\x006C\x0020\x006F\x0067\x0020\x00E1\x0064\x0072\x0065\x0070\x0061\x0020\x0053\x00E6\x0076\x00F6\x0072\x0020\x0067\x0072\x00E9\x0074\x0020\x00E1\x00F0\x0061\x006E\x0020\x00FE\x0076\x00ED\x0020\x00FA\x006C\x0070\x0061\x006E\x0020\x0076\x0061\x0072\x0020\x00F3\x006E\x00FD\x0074";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #13", "[Unicode]") {
    // Japanese Hiragana
    static const std::string str = "\xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99";
    static const std::wstring wstr = L"\x3044\x308D\x306F\x306B\x307B\x3078\x3068\x3061\x308A\x306C\x308B\x3092\x308F\x304B\x3088\x305F\x308C\x305D\x3064\x306D\x306A\x3089\x3080\x3046\x3090\x306E\x304A\x304F\x3084\x307E\x3051\x3075\x3053\x3048\x3066\x3042\x3055\x304D\x3086\x3081\x307F\x3057\x3091\x3072\x3082\x305B\x3059";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #14", "[Unicode]") {
    // Japanese Katakana
    static const std::string str = "\xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88\x20\xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2\x20\xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD\x20\xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E\x20\xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86\x20\xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7\x20\xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3";
    static const std::wstring wstr = L"\x30A4\x30ED\x30CF\x30CB\x30DB\x30D8\x30C8\x0020\x30C1\x30EA\x30CC\x30EB\x30F2\x0020\x30EF\x30AB\x30E8\x30BF\x30EC\x30BD\x0020\x30C4\x30CD\x30CA\x30E9\x30E0\x30A6\x30F0\x30CE\x30AA\x30AF\x30E4\x30DE\x0020\x30B1\x30D5\x30B3\x30A8\x30C6\x0020\x30A2\x30B5\x30AD\x30E6\x30E1\x30DF\x30B7\x0020\x30F1\x30D2\x30E2\x30BB\x30B9\x30F3";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #15", "[Unicode]") {
    // Hebrew
    static const std::string str = "\xD7\x93\xD7\x92\x20\xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F\x20\xD7\xA9\xD7\x98\x20\xD7\x91\xD7\x99\xD7\x9D\x20\xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91\x20\xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2\x20\xD7\x9E\xD7\xA6\xD7\x90\x20\xD7\x9C\xD7\x95\x20\xD7\x97\xD7\x91\xD7\xA8\xD7\x94\x20\xD7\x90\xD7\x99\xD7\x9A\x20\xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94";
    static const std::wstring wstr = L"\x05D3\x05D2\x0020\x05E1\x05E7\x05E8\x05DF\x0020\x05E9\x05D8\x0020\x05D1\x05D9\x05DD\x0020\x05DE\x05D0\x05D5\x05DB\x05D6\x05D1\x0020\x05D5\x05DC\x05E4\x05EA\x05E2\x0020\x05DE\x05E6\x05D0\x0020\x05DC\x05D5\x0020\x05D7\x05D1\x05E8\x05D4\x0020\x05D0\x05D9\x05DA\x0020\x05D4\x05E7\x05DC\x05D9\x05D8\x05D4";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #16", "[Unicode]") {
    // Polish
    static const std::string str = "\x50\x63\x68\x6E\xC4\x85\xC4\x87\x20\x77\x20\x74\xC4\x99\x20\xC5\x82\xC3\xB3\x64\xC5\xBA\x20\x6A\x65\xC5\xBC\x61\x20\x6C\x75\x62\x20\x6F\xC5\x9B\x6D\x20\x73\x6B\x72\x7A\x79\xC5\x84\x20\x66\x69\x67";
    static const std::wstring wstr = L"\x0050\x0063\x0068\x006E\x0105\x0107\x0020\x0077\x0020\x0074\x0119\x0020\x0142\x00F3\x0064\x017A\x0020\x006A\x0065\x017C\x0061\x0020\x006C\x0075\x0062\x0020\x006F\x015B\x006D\x0020\x0073\x006B\x0072\x007A\x0079\x0144\x0020\x0066\x0069\x0067";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #17", "[Unicode]") {
    // Russian
    static const std::string str = "\xD0\x92\x20\xD1\x87\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85\x20\xD1\x8E\xD0\xB3\xD0\xB0\x20\xD0\xB6\xD0\xB8\xD0\xBB\x20\xD0\xB1\xD1\x8B\x20\xD1\x86\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81\x3F\x20\xD0\x94\xD0\xB0\x2C\x20\xD0\xBD\xD0\xBE\x20\xD1\x84\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9\x20\xD1\x8D\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80\x21\x20\xD0\xA1\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C\x20\xD0\xB6\xD0\xB5\x20\xD0\xB5\xD1\x89\xD1\x91\x20\xD1\x8D\xD1\x82\xD0\xB8\xD1\x85\x20\xD0\xBC\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85\x20\xD1\x84\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85\x20\xD0\xB1\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA\x20\xD0\xB4\xD0\xB0\x20\xD0\xB2\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9\x20\xD1\x87\xD0\xB0\xD1\x8E";
    static const std::wstring wstr = L"\x0412\x0020\x0447\x0430\x0449\x0430\x0445\x0020\x044E\x0433\x0430\x0020\x0436\x0438\x043B\x0020\x0431\x044B\x0020\x0446\x0438\x0442\x0440\x0443\x0441\x003F\x0020\x0414\x0430\x002C\x0020\x043D\x043E\x0020\x0444\x0430\x043B\x044C\x0448\x0438\x0432\x044B\x0439\x0020\x044D\x043A\x0437\x0435\x043C\x043F\x043B\x044F\x0440\x0021\x0020\x0421\x044A\x0435\x0448\x044C\x0020\x0436\x0435\x0020\x0435\x0449\x0451\x0020\x044D\x0442\x0438\x0445\x0020\x043C\x044F\x0433\x043A\x0438\x0445\x0020\x0444\x0440\x0430\x043D\x0446\x0443\x0437\x0441\x043A\x0438\x0445\x0020\x0431\x0443\x043B\x043E\x043A\x0020\x0434\x0430\x0020\x0432\x044B\x043F\x0435\x0439\x0020\x0447\x0430\x044E";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing UTF8 To WSTR and back #18", "[Unicode]") {
    // Turkish
    static const std::string str = "\x50\x69\x6A\x61\x6D\x61\x6C\xC4\xB1\x20\x68\x61\x73\x74\x61\x2C\x20\x79\x61\xC4\x9F\xC4\xB1\x7A\x20\xC5\x9F\x6F\x66\xC3\xB6\x72\x65\x20\xC3\xA7\x61\x62\x75\x63\x61\x6B\x20\x67\xC3\xBC\x76\x65\x6E\x64\x69\x2E";
    static const std::wstring wstr = L"\x0050\x0069\x006A\x0061\x006D\x0061\x006C\x0131\x0020\x0068\x0061\x0073\x0074\x0061\x002C\x0020\x0079\x0061\x011F\x0131\x007A\x0020\x015F\x006F\x0066\x00F6\x0072\x0065\x0020\x00E7\x0061\x0062\x0075\x0063\x0061\x006B\x0020\x0067\x00FC\x0076\x0065\x006E\x0064\x0069\x002E";

    REQUIRE(ffw::utf8ToWstr(str) == wstr);
    REQUIRE(ffw::wstrToUtf8(wstr) == str);
    REQUIRE(ffw::wstrToUtf8(ffw::utf8ToWstr(str)) == str);
}

TEST_CASE("Testing string tokenizer #1", "[Math]") {
    std::string str = "  Hello  World! This    is a  sentence...   ";
    const auto tokens = ffw::getTokens(str, " ");
    REQUIRE(tokens.size() == 6);
    REQUIRE(tokens.size() == ffw::getTokensNum(str, " "));
    REQUIRE(tokens[0] == "Hello");
    REQUIRE(tokens[1] == "World!");
    REQUIRE(tokens[2] == "This");
    REQUIRE(tokens[3] == "is");
    REQUIRE(tokens[4] == "a");
    REQUIRE(tokens[5] == "sentence...");
}

TEST_CASE("Testing string tokenizer #2", "[Math]") {
    std::string str = "  Hello  World! This    is a  sentence...   ";
    const auto tokens = ffw::getTokens(str, ' ');
    REQUIRE(tokens.size() == 6);
    REQUIRE(tokens.size() == ffw::getTokensNum(str, ' '));
    REQUIRE(tokens[0] == "Hello");
    REQUIRE(tokens[1] == "World!");
    REQUIRE(tokens[2] == "This");
    REQUIRE(tokens[3] == "is");
    REQUIRE(tokens[4] == "a");
    REQUIRE(tokens[5] == "sentence...");
}

TEST_CASE("Testing string tokenizer #3", "[Math]") {
    std::string str = " Hello  World! This is a  sentence...   ";
    const auto tokens = ffw::getTokens(str, "  ");
    REQUIRE(tokens.size() == 4);
    REQUIRE(tokens.size() == ffw::getTokensNum(str, "  "));
    REQUIRE(tokens[0] == " Hello");
    REQUIRE(tokens[1] == "World! This is a");
    REQUIRE(tokens[2] == "sentence...");
    REQUIRE(tokens[3] == " ");
}

TEST_CASE("Testing string tokenizer #4", "[Math]") {
    std::string str = " Hello  World! This is a  sentence...  ";
    const auto tokens = ffw::getTokens(str, "  ");
    REQUIRE(tokens.size() == 3);
    REQUIRE(tokens.size() == ffw::getTokensNum(str, "  "));
    REQUIRE(tokens[0] == " Hello");
    REQUIRE(tokens[1] == "World! This is a");
    REQUIRE(tokens[2] == "sentence...");
}

TEST_CASE("Testing string tokenizer #5", "[Math]") {
    std::string str = "        ";
    const auto tokens = ffw::getTokens(str, "  ");
    REQUIRE(tokens.size() == 0);
    REQUIRE(tokens.size() == ffw::getTokensNum(str, "  "));
}

TEST_CASE("Testing string tokenizer #6", "[Math]") {
    std::string str = "         ";
    const auto tokens = ffw::getTokens(str, "  ");
    REQUIRE(tokens.size() == 1);
    REQUIRE(tokens.size() == ffw::getTokensNum(str, "  "));
    REQUIRE(tokens[0] == " ");
}

TEST_CASE("Testing string tokenizer #7", "[Math]") {
    std::string str = "DELIMHelloDELIMWorldDELIMDELIMWhat";
    const auto tokens = ffw::getTokens(str, "DELIM");
    REQUIRE(tokens.size() == 3);
    REQUIRE(tokens[0] == "Hello");
    REQUIRE(tokens[1] == "World");
    REQUIRE(tokens[2] == "What");
}

TEST_CASE("Testing string tokenizer #8", "[Math]") {
    std::string str = "DELIMDELIMDELIMDELIMDELIMDELIMDELIM";
    const auto tokens = ffw::getTokens(str, "DELIM");
    REQUIRE(tokens.size() == 0);
}
